// Override key bindings by placing them into your key bindings file.
[
    { "key": "escape escape",         "command": "workbench.action.exitZenMode",
                                         "when": "inZenMode" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "shift+escape",          "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "escape",                "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "ctrl+end",              "command": "cursorBottom",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+end",        "command": "cursorBottomSelect",
                                         "when": "textInputFocus" },
    { "key": "down",                  "command": "cursorDown",
                                         "when": "textInputFocus" },
    { "key": "shift+down",            "command": "cursorDownSelect",
                                         "when": "textInputFocus" },
    { "key": "end",                   "command": "cursorEnd",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "shift+end",             "command": "cursorEndSelect",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "home",                  "command": "cursorHome",
                                         "when": "textInputFocus" },
    { "key": "shift+home",            "command": "cursorHomeSelect",
                                         "when": "textInputFocus" },
    { "key": "left",                  "command": "cursorLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+left",            "command": "cursorLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "pagedown",              "command": "cursorPageDown",
                                         "when": "textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorPageDownSelect",
                                         "when": "textInputFocus" },
    { "key": "pageup",                "command": "cursorPageUp",
                                         "when": "textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorPageUpSelect",
                                         "when": "textInputFocus" },
    { "key": "right",                 "command": "cursorRight",
                                         "when": "textInputFocus" },
    { "key": "shift+right",           "command": "cursorRightSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+home",             "command": "cursorTop",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+home",       "command": "cursorTopSelect",
                                         "when": "textInputFocus" },
    { "key": "up",                    "command": "cursorUp",
                                         "when": "textInputFocus" },
    { "key": "shift+up",              "command": "cursorUpSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+backspace",       "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "backspace",             "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "delete",                "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "ctrl+a",                "command": "editor.action.selectAll" },
    { "key": "ctrl+l",                "command": "expandLineSelection",
                                         "when": "textInputFocus" },
    { "key": "shift+tab",             "command": "outdent",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "ctrl+shift+z",          "command": "redo" },
    { "key": "ctrl+y",                "command": "redo" },
    { "key": "ctrl+down",             "command": "scrollLineDown",
                                         "when": "textInputFocus" },
    { "key": "ctrl+up",               "command": "scrollLineUp",
                                         "when": "textInputFocus" },
    { "key": "alt+pagedown",          "command": "scrollPageDown",
                                         "when": "textInputFocus" },
    { "key": "alt+pageup",            "command": "scrollPageUp",
                                         "when": "textInputFocus" },
    { "key": "tab",                   "command": "tab",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "ctrl+z",                "command": "undo" },
    { "key": "shift+down",            "command": "cursorColumnSelectDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+left",            "command": "cursorColumnSelectLeft",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorColumnSelectPageDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorColumnSelectPageUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+right",           "command": "cursorColumnSelectRight",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+up",              "command": "cursorColumnSelectUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+escape",          "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "escape",                "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "f12",                   "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "f4",                    "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f12",             "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f4",              "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+enter",           "command": "refactorPreview.apply",
                                         "when": "refactorPreview.enabled && refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
    { "key": "escape",                "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible" },
    { "key": "ctrl+f",                "command": "actions.find",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "enter",                 "command": "breakpointWidget.action.acceptInput",
                                         "when": "breakpointWidgetVisible && inBreakpointWidget" },
    { "key": "shift+escape",          "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "ctrl+u",                "command": "cursorUndo",
                                         "when": "textInputFocus" },
    { "key": "ctrl+right",            "command": "cursorWordEndRight",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+right",      "command": "cursorWordEndRightSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+left",             "command": "cursorWordLeft",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+left",       "command": "cursorWordLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+backspace",        "command": "deleteWordLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+delete",           "command": "deleteWordRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+k ctrl+c",         "command": "editor.action.addCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+d",                "command": "editor.action.addSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "shift+alt+[IntlBackslash]", "command": "editor.action.autoFix",
                                         "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
    { "key": "shift+alt+.",           "command": "editor.action.autoFix",
                                         "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
    { "key": "ctrl+shift+a",          "command": "editor.action.blockComment",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.cancelSelectionAnchor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "ctrl+f2",               "command": "editor.action.changeAll",
                                         "when": "editorTextFocus && editorTextFocus && !editorReadonly" },
    { "key": "ctrl+c",                "command": "editor.action.clipboardCopyAction" },
    { "key": "ctrl+x",                "command": "editor.action.clipboardCutAction" },
    { "key": "shift+insert",          "command": "editor.action.clipboardPasteAction" },
    { "key": "ctrl+v",                "command": "editor.action.clipboardPasteAction" },
    { "key": "ctrl+/",                "command": "editor.action.commentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+alt+down",   "command": "editor.action.copyLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+alt+up",     "command": "editor.action.copyLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+k ctrl+k",         "command": "editor.action.defineKeybinding",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'" },
    { "key": "ctrl+shift+k",          "command": "editor.action.deleteLines",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "f7",                    "command": "editor.action.diffReview.next",
                                         "when": "isInDiffEditor" },
    { "key": "shift+f7",              "command": "editor.action.diffReview.prev",
                                         "when": "isInDiffEditor" },
    { "key": "alt+f3",                "command": "editor.action.dirtydiff.next",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+f3",          "command": "editor.action.dirtydiff.previous",
                                         "when": "editorTextFocus" },
    { "key": "enter",                 "command": "editor.action.extensioneditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "shift+enter",           "command": "editor.action.extensioneditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "ctrl+f",                "command": "editor.action.extensioneditor.showfind",
                                         "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "ctrl+shift+i",          "command": "editor.action.formatDocument",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
    { "key": "ctrl+shift+i",          "command": "editor.action.formatDocument.none",
                                         "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
    { "key": "ctrl+k ctrl+f",         "command": "editor.action.formatSelection",
                                         "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
    { "key": "ctrl+f12",              "command": "editor.action.goToImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "shift+f12",             "command": "editor.action.goToReferences",
                                         "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "ctrl+shift+[IntlBackslash]", "command": "editor.action.inPlaceReplace.down",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+.",          "command": "editor.action.inPlaceReplace.down",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+[IntlBackslash]",  "command": "editor.action.inPlaceReplace.up",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+,",          "command": "editor.action.inPlaceReplace.up",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+]",                "command": "editor.action.indentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+up",         "command": "editor.action.insertCursorAbove",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+up",          "command": "editor.action.insertCursorAbove",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+i",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+down",       "command": "editor.action.insertCursorBelow",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+down",        "command": "editor.action.insertCursorBelow",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+enter",            "command": "editor.action.insertLineAfter",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+enter",      "command": "editor.action.insertLineBefore",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+\\",         "command": "editor.action.jumpToBracket",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+f2",         "command": "editor.action.linkedEditing",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "alt+f8",                "command": "editor.action.marker.next",
                                         "when": "editorFocus" },
    { "key": "f8",                    "command": "editor.action.marker.nextInFiles",
                                         "when": "editorFocus" },
    { "key": "shift+alt+f8",          "command": "editor.action.marker.prev",
                                         "when": "editorFocus" },
    { "key": "shift+f8",              "command": "editor.action.marker.prevInFiles",
                                         "when": "editorFocus" },
    { "key": "alt+down",              "command": "editor.action.moveLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+up",                "command": "editor.action.moveLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+k ctrl+d",         "command": "editor.action.moveSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "f3",                    "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "enter",                 "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "ctrl+f3",               "command": "editor.action.nextSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+alt+o",           "command": "editor.action.organizeImports",
                                         "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
    { "key": "ctrl+[",                "command": "editor.action.outdentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+f10",        "command": "editor.action.peekDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "ctrl+shift+f12",        "command": "editor.action.peekImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+f3",              "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+enter",           "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "ctrl+shift+f3",         "command": "editor.action.previousSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "ctrl+.",                "command": "editor.action.quickFix",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+r",          "command": "editor.action.refactor",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "ctrl+k ctrl+u",         "command": "editor.action.removeCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "f2",                    "command": "editor.action.rename",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "f12",                   "command": "editor.action.revealDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "ctrl+k f12",            "command": "editor.action.revealDefinitionAside",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "ctrl+k ctrl+k",         "command": "editor.action.selectFromAnchorToCursor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "ctrl+shift+l",          "command": "editor.action.selectHighlights",
                                         "when": "editorFocus" },
    { "key": "ctrl+k ctrl+b",         "command": "editor.action.setSelectionAnchor",
                                         "when": "editorTextFocus" },
    { "key": "alt+f1",                "command": "editor.action.showAccessibilityHelp" },
    { "key": "shift+alt+f1",          "command": "editor.action.showAccessibilityHelp" },
    { "key": "shift+f10",             "command": "editor.action.showContextMenu",
                                         "when": "textInputFocus" },
    { "key": "ctrl+k ctrl+i",         "command": "editor.action.showHover",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+right",       "command": "editor.action.smartSelect.expand",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+left",        "command": "editor.action.smartSelect.shrink",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+h",                "command": "editor.action.startFindReplaceAction",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "ctrl+m",                "command": "editor.action.toggleTabFocusMode" },
    { "key": "alt+z",                 "command": "editor.action.toggleWordWrap" },
    { "key": "ctrl+shift+space",      "command": "editor.action.triggerParameterHints",
                                         "when": "editorHasSignatureHelpProvider && editorTextFocus" },
    { "key": "ctrl+i",                "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
    { "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
    { "key": "ctrl+k ctrl+x",         "command": "editor.action.trimTrailingWhitespace",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "enter",                 "command": "editor.action.webvieweditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "shift+enter",           "command": "editor.action.webvieweditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "escape",                "command": "editor.action.webvieweditor.hideFind",
                                         "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "ctrl+f",                "command": "editor.action.webvieweditor.showFind",
                                         "when": "!editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "f7",                    "command": "editor.action.wordHighlight.next",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "shift+f7",              "command": "editor.action.wordHighlight.prev",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "escape",                "command": "editor.cancelOperation",
                                         "when": "cancellableOperation" },
    { "key": "escape",                "command": "editor.debug.action.closeExceptionWidget",
                                         "when": "exceptionWidgetVisible" },
    { "key": "ctrl+k ctrl+i",         "command": "editor.debug.action.showDebugHover",
                                         "when": "editorTextFocus && inDebugMode" },
    { "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint",
                                         "when": "debuggersAvailable && editorTextFocus" },
    { "key": "tab",                   "command": "editor.emmet.action.expandAbbreviation",
                                         "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "ctrl+shift+[",          "command": "editor.fold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+0",         "command": "editor.foldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+/",         "command": "editor.foldAllBlockComments",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+8",         "command": "editor.foldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+1",         "command": "editor.foldLevel1",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+2",         "command": "editor.foldLevel2",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+3",         "command": "editor.foldLevel3",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+4",         "command": "editor.foldLevel4",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+5",         "command": "editor.foldLevel5",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+6",         "command": "editor.foldLevel6",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+7",         "command": "editor.foldLevel7",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+[",         "command": "editor.foldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "f12",                   "command": "editor.gotoNextSymbolFromResult",
                                         "when": "hasSymbols" },
    { "key": "escape",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                         "when": "hasSymbols" },
    { "key": "ctrl+k ctrl+l",         "command": "editor.toggleFold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+shift+]",          "command": "editor.unfold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+j",         "command": "editor.unfoldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+9",         "command": "editor.unfoldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+k ctrl+]",         "command": "editor.unfoldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "tab",                   "command": "insertSnippet",
                                         "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
    { "key": "meta+enter",            "command": "notebook.cell.execute",
                                         "when": "notebookCellListFocused" },
    { "key": "alt+enter",             "command": "notebook.cell.executeAndInsertBelow",
                                         "when": "notebookCellListFocused" },
    { "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                         "when": "notebookCellListFocused" },
    { "key": "ctrl+shift+v",          "command": "notebook.cell.pasteAbove",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
    { "key": "up",                    "command": "notebook.focusPreviousEditor",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
    { "key": "ctrl+shift+i",          "command": "notebook.formatCell",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+enter",            "command": "openReferenceToSide",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus" },
    { "key": "enter",                 "command": "repl.action.acceptInput",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "ctrl+f",                "command": "repl.action.filter",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "ctrl+shift+r",          "command": "rerunSearchEditorSearch",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "search.action.focusQueryEditorWidget",
                                         "when": "inSearchEditor" },
    { "key": "ctrl+shift+backspace",  "command": "search.searchEditor.action.deleteFileResults",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.clearSearchResults",
                                         "when": "inSettingsEditor && inSettingsSearch" },
    { "key": "ctrl+.",                "command": "settings.action.editFocusedSetting",
                                         "when": "inSettingsSearch" },
    { "key": "enter",                 "command": "settings.action.focusNextSetting",
                                         "when": "inSettingsSearch" },
    { "key": "shift+enter",           "command": "settings.action.focusPreviousSetting",
                                         "when": "inSettingsSearch" },
    { "key": "down",                  "command": "settings.action.focusSettingsFile",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "ctrl+f",                "command": "settings.action.search",
                                         "when": "inSettingsEditor" },
    { "key": "ctrl+/",                "command": "toggleExplainMode",
                                         "when": "suggestWidgetVisible" },
    { "key": "ctrl+k f2",             "command": "togglePeekWidgetFocus",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "alt+f5",                "command": "workbench.action.editor.nextChange",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+f5",          "command": "workbench.action.editor.previousChange",
                                         "when": "editorTextFocus" },
    { "key": "shift+escape",          "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "escape",                "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "ctrl+enter",            "command": "workbench.action.submitComment",
                                         "when": "commentEditorFocused" },
    { "key": "shift+escape",          "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "escape",                "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "ctrl+alt+enter",        "command": "editor.action.replaceAll",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "ctrl+shift+1",          "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "enter",                 "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
    { "key": "alt+enter",             "command": "editor.action.selectAllMatches",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "alt+c",                 "command": "toggleFindCaseSensitive",
                                         "when": "editorFocus" },
    { "key": "alt+l",                 "command": "toggleFindInSelection",
                                         "when": "editorFocus" },
    { "key": "alt+r",                 "command": "toggleFindRegex",
                                         "when": "editorFocus" },
    { "key": "alt+w",                 "command": "toggleFindWholeWord",
                                         "when": "editorFocus" },
    { "key": "alt+p",                 "command": "togglePreserveCase",
                                         "when": "editorFocus" },
    { "key": "tab",                   "command": "jumpToNextSnippetPlaceholder",
                                         "when": "editorTextFocus && hasNextTabstop && inSnippetMode" },
    { "key": "shift+tab",             "command": "jumpToPrevSnippetPlaceholder",
                                         "when": "editorTextFocus && hasPrevTabstop && inSnippetMode" },
    { "key": "escape",                "command": "leaveEditorMessage",
                                         "when": "messageVisible" },
    { "key": "shift+escape",          "command": "leaveSnippet",
                                         "when": "editorTextFocus && inSnippetMode" },
    { "key": "escape",                "command": "leaveSnippet",
                                         "when": "editorTextFocus && inSnippetMode" },
    { "key": "shift+escape",          "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "escape",                "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "shift+escape",          "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationToastsVisible" },
    { "key": "shift+escape",          "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "escape",                "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "alt+down",              "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "down",                  "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "alt+up",                "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "up",                    "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "shift+tab",             "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && textInputFocus" },
    { "key": "shift+enter",           "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && textInputFocus" },
    { "key": "tab",                   "command": "acceptSelectedSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptSelectedSuggestion",
                                         "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
    { "key": "shift+escape",          "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "tab",                   "command": "insertBestCompletion",
                                         "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "tab",                   "command": "insertNextSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "shift+tab",             "command": "insertPrevSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "ctrl+pagedown",         "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "pagedown",              "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+down",             "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "down",                  "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+pageup",           "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "pageup",                "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+up",               "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "up",                    "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+space",            "command": "toggleSuggestionDetails",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+alt+space",        "command": "toggleSuggestionFocus",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "shift+enter",           "command": "acceptRenameInputWithPreview",
                                         "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible" },
    { "key": "shift+escape",          "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "escape",                "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "shift+escape",          "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "escape",                "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "ctrl+shift+l",          "command": "addCursorsAtSearchResults",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+shift+;",          "command": "breadcrumbs.focus",
                                         "when": "breadcrumbsPossible" },
    { "key": "ctrl+shift+[IntlBackslash]", "command": "breadcrumbs.focusAndSelect",
                                         "when": "breadcrumbsPossible" },
    { "key": "ctrl+shift+.",          "command": "breadcrumbs.focusAndSelect",
                                         "when": "breadcrumbsPossible" },
    { "key": "ctrl+right",            "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "right",                 "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+left",             "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "left",                  "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+enter",            "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "space",                 "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+enter",            "command": "breadcrumbs.revealFocusedFromTreeAside",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "down",                  "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "enter",                 "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+shift+[IntlBackslash]", "command": "breadcrumbs.toggleToOn",
                                         "when": "!config.breadcrumbs.enabled" },
    { "key": "ctrl+shift+.",          "command": "breadcrumbs.toggleToOn",
                                         "when": "!config.breadcrumbs.enabled" },
    { "key": "shift+escape",          "command": "closeAccessibilityHelp",
                                         "when": "accessibilityHelpWidgetVisible && editorFocus" },
    { "key": "escape",                "command": "closeAccessibilityHelp",
                                         "when": "accessibilityHelpWidgetVisible && editorFocus" },
    { "key": "escape",                "command": "closeReplaceInFilesWidget",
                                         "when": "replaceInputBoxFocus && searchViewletVisible" },
    { "key": "ctrl+alt+c",            "command": "copyFilePath",
                                         "when": "!editorFocus" },
    { "key": "ctrl+shift+alt+c",      "command": "copyRelativeFilePath",
                                         "when": "!editorFocus" },
    { "key": "alt+enter",             "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "ctrl+enter",            "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "delete",                "command": "debug.removeBreakpoint",
                                         "when": "breakpointsFocused && !breakpointSelected" },
    { "key": "delete",                "command": "debug.removeWatchExpression",
                                         "when": "watchExpressionsFocused && !expressionSelected" },
    { "key": "alt+-",                 "command": "decreaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "shift+f9",              "command": "editor.debug.action.toggleInlineBreakpoint",
                                         "when": "editorTextFocus" },
    { "key": "shift+enter",           "command": "editor.refocusCallHierarchy",
                                         "when": "callHierarchyVisible" },
    { "key": "shift+alt+h",           "command": "editor.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
    { "key": "shift+alt+h",           "command": "editor.showIncomingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
    { "key": "shift+alt+h",           "command": "editor.showOutgoingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
    { "key": "ctrl+enter",            "command": "explorer.openToSide",
                                         "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus" },
    { "key": "shift+alt+f",           "command": "filesExplorer.findInFolder",
                                         "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
    { "key": "alt+down",              "command": "history.showNext",
                                         "when": "historyNavigationEnabled && historyNavigationWidget" },
    { "key": "down",                  "command": "history.showNext",
                                         "when": "historyNavigationEnabled && historyNavigationWidget" },
    { "key": "alt+up",                "command": "history.showPrevious",
                                         "when": "historyNavigationEnabled && historyNavigationWidget" },
    { "key": "up",                    "command": "history.showPrevious",
                                         "when": "historyNavigationEnabled && historyNavigationWidget" },
    { "key": "alt+=",                 "command": "increaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "ctrl+k ctrl+a",         "command": "keybindings.editor.addKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "escape",                "command": "keybindings.editor.clearSearchResults",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "ctrl+c",                "command": "keybindings.editor.copyKeybindingEntry",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "ctrl+k ctrl+k",         "command": "keybindings.editor.defineKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "ctrl+k ctrl+e",         "command": "keybindings.editor.defineWhenExpression",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "ctrl+down",             "command": "keybindings.editor.focusKeybindings",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "alt+k",                 "command": "keybindings.editor.recordSearchKeys",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "delete",                "command": "keybindings.editor.removeKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "ctrl+f",                "command": "keybindings.editor.searchKeybindings",
                                         "when": "inKeybindings" },
    { "key": "alt+p",                 "command": "keybindings.editor.toggleSortByPrecedence",
                                         "when": "inKeybindings" },
    { "key": "escape",                "command": "list.clear",
                                         "when": "listFocus && listHasSelectionOrFocus && !inputFocus" },
    { "key": "left",                  "command": "list.collapse",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+left",             "command": "list.collapseAll",
                                         "when": "listFocus && !inputFocus" },
    { "key": "right",                 "command": "list.expand",
                                         "when": "listFocus && !inputFocus" },
    { "key": "shift+down",            "command": "list.expandSelectionDown",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "shift+up",              "command": "list.expandSelectionUp",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "down",                  "command": "list.focusDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "home",                  "command": "list.focusFirst",
                                         "when": "listFocus && !inputFocus" },
    { "key": "end",                   "command": "list.focusLast",
                                         "when": "listFocus && !inputFocus" },
    { "key": "pagedown",              "command": "list.focusPageDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "pageup",                "command": "list.focusPageUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "up",                    "command": "list.focusUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+down",             "command": "list.scrollDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+up",               "command": "list.scrollUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "enter",                 "command": "list.select",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+a",                "command": "list.selectAll",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "space",                 "command": "list.toggleExpand",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+shift+enter",      "command": "list.toggleSelection",
                                         "when": "listFocus && !inputFocus" },
    { "key": "y",                     "command": "notebook.cell.changeToCode",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markdown'" },
    { "key": "m",                     "command": "notebook.cell.changeToMarkdown",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
    { "key": "alt+delete",            "command": "notebook.cell.clearOutputs",
                                         "when": "notebookCellHasOutputs && notebookEditorFocused && !inputFocus" },
    { "key": "ctrl+k ctrl+c",         "command": "notebook.cell.collapseCellContent",
                                         "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
    { "key": "ctrl+k t",              "command": "notebook.cell.collapseCellOutput",
                                         "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
    { "key": "shift+alt+down",        "command": "notebook.cell.copyDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "shift+alt+up",          "command": "notebook.cell.copyUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "delete",                "command": "notebook.cell.delete",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "enter",                 "command": "notebook.cell.edit",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "ctrl+k ctrl+c",         "command": "notebook.cell.expandCellContent",
                                         "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
    { "key": "ctrl+k t",              "command": "notebook.cell.expandCellOutput",
                                         "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
    { "key": "ctrl+down",             "command": "notebook.cell.focusInOutput",
                                         "when": "notebookCellHasOutputs && notebookEditorFocused" },
    { "key": "ctrl+up",               "command": "notebook.cell.focusOutOutput",
                                         "when": "notebookEditorFocused" },
    { "key": "ctrl+shift+enter",      "command": "notebook.cell.insertCodeCellAbove",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "ctrl+enter",            "command": "notebook.cell.insertCodeCellBelow",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "shift+alt+meta+j",      "command": "notebook.cell.joinAbove",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+meta+j",            "command": "notebook.cell.joinBelow",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+down",              "command": "notebook.cell.moveDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "alt+up",                "command": "notebook.cell.moveUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "ctrl+k ctrl+shift+\\",  "command": "notebook.cell.split",
                                         "when": "notebookCellEditable && notebookCellEditorFocused && notebookEditable && notebookEditorFocused && !notebookEditorCursorAtEditorBeginEnd" },
    { "key": "ctrl+l",                "command": "notebook.centerActiveCell",
                                         "when": "notebookEditorFocused" },
    { "key": "ctrl+f",                "command": "notebook.find",
                                         "when": "notebookEditorFocused" },
    { "key": "ctrl+end",              "command": "notebook.focusBottom",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "ctrl+down",             "command": "notebook.focusNextEditor",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "ctrl+home",             "command": "notebook.focusTop",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "left",                  "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+shift+[",          "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+shift+i",          "command": "notebook.format",
                                         "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "escape",                "command": "notebook.hideFind",
                                         "when": "notebookEditorFocused && notebookFindWidgetFocused" },
    { "key": "right",                 "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+shift+]",          "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "delete",                "command": "notification.clear",
                                         "when": "notificationFocus" },
    { "key": "left",                  "command": "notification.collapse",
                                         "when": "notificationFocus" },
    { "key": "right",                 "command": "notification.expand",
                                         "when": "notificationFocus" },
    { "key": "enter",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "space",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "home",                  "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pageup",                "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "end",                   "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pagedown",              "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "down",                  "command": "notifications.focusNextToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "up",                    "command": "notifications.focusPreviousToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "ctrl+c",                "command": "problems.action.copy",
                                         "when": "problemFocus" },
    { "key": "ctrl+f",                "command": "problems.action.focusFilter",
                                         "when": "focusedView == 'workbench.panel.markers.view'" },
    { "key": "ctrl+down",             "command": "problems.action.focusProblemsFromFilter",
                                         "when": "problemsFilterFocus" },
    { "key": "enter",                 "command": "problems.action.open",
                                         "when": "problemFocus" },
    { "key": "ctrl+enter",            "command": "problems.action.openToSide",
                                         "when": "problemFocus" },
    { "key": "ctrl+.",                "command": "problems.action.showQuickFixes",
                                         "when": "problemFocus" },
    { "key": "space",                 "command": "refactorPreview.toggleCheckedState",
                                         "when": "listFocus && refactorPreview.enabled && !inputFocus" },
    { "key": "ctrl+alt+r",            "command": "revealFileInOS",
                                         "when": "!editorFocus" },
    { "key": "enter",                 "command": "revealReference",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus" },
    { "key": "ctrl+enter",            "command": "scm.acceptInput",
                                         "when": "scmRepository" },
    { "key": "alt+down",              "command": "scm.forceViewNextCommit",
                                         "when": "scmRepository" },
    { "key": "alt+up",                "command": "scm.forceViewPreviousCommit",
                                         "when": "scmRepository" },
    { "key": "down",                  "command": "scm.viewNextCommit",
                                         "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "up",                    "command": "scm.viewPreviousCommit",
                                         "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "escape",                "command": "search.action.cancel",
                                         "when": "listFocus && searchViewletVisible && !inputFocus" },
    { "key": "ctrl+c",                "command": "search.action.copyMatch",
                                         "when": "fileMatchOrMatchFocus" },
    { "key": "ctrl+alt+c",            "command": "search.action.copyPath",
                                         "when": "fileMatchOrFolderMatchWithResourceFocus" },
    { "key": "f4",                    "command": "search.action.focusNextSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "ctrl+up",               "command": "search.action.focusSearchFromResults",
                                         "when": "firstMatchFocus && searchViewletVisible" },
    { "key": "alt+enter",             "command": "search.action.openInEditor",
                                         "when": "hasSearchResult && searchViewletFocus" },
    { "key": "enter",                 "command": "search.action.openResult",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+enter",            "command": "search.action.openResultToSide",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "delete",                "command": "search.action.remove",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+shift+1",          "command": "search.action.replace",
                                         "when": "matchFocus && replaceActive && searchViewletVisible" },
    { "key": "ctrl+alt+enter",        "command": "search.action.replaceAll",
                                         "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
    { "key": "ctrl+shift+enter",      "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "ctrl+shift+1",          "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "ctrl+shift+enter",      "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "ctrl+shift+1",          "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "ctrl+down",             "command": "search.focus.nextInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
    { "key": "ctrl+up",               "command": "search.focus.previousInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
    { "key": "ctrl+shift+l",          "command": "selectAllSearchEditorMatches",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.focusLevelUp",
                                         "when": "inSettingsEditor && !inSettingsSearch" },
    { "key": "enter",                 "command": "settings.action.focusSettingControl",
                                         "when": "settingRowFocus" },
    { "key": "down",                  "command": "settings.action.focusSettingsFromSearch",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "enter",                 "command": "settings.action.focusSettingsList",
                                         "when": "inSettingsEditor && settingsTocRowFocus" },
    { "key": "left",                  "command": "settings.action.focusTOC",
                                         "when": "inSettingsEditor && settingRowFocus" },
    { "key": "shift+f9",              "command": "settings.action.showContextMenu",
                                         "when": "inSettingsEditor" },
    { "key": "alt+c",                 "command": "toggleSearchCaseSensitive",
                                         "when": "searchViewletFocus" },
    { "key": "alt+c",                 "command": "toggleSearchEditorCaseSensitive",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+l",                 "command": "toggleSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "alt+r",                 "command": "toggleSearchEditorRegex",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+w",                 "command": "toggleSearchEditorWholeWord",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+p",                 "command": "toggleSearchPreserveCase",
                                         "when": "searchViewletFocus" },
    { "key": "alt+r",                 "command": "toggleSearchRegex",
                                         "when": "searchViewletFocus" },
    { "key": "alt+w",                 "command": "toggleSearchWholeWord",
                                         "when": "searchViewletFocus" },
    { "key": "ctrl+w",                "command": "workbench.action.closeActiveEditor" },
    { "key": "ctrl+k ctrl+w",         "command": "workbench.action.closeAllEditors" },
    { "key": "ctrl+k ctrl+shift+w",   "command": "workbench.action.closeAllGroups" },
    { "key": "ctrl+k w",              "command": "workbench.action.closeEditorsInGroup" },
    { "key": "ctrl+k f",              "command": "workbench.action.closeFolder",
                                         "when": "emptyWorkspaceSupport" },
    { "key": "ctrl+w",                "command": "workbench.action.closeGroup",
                                         "when": "activeEditorGroupEmpty && multipleEditorGroups" },
    { "key": "shift+escape",          "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "escape",                "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "ctrl+k u",              "command": "workbench.action.closeUnmodifiedEditors" },
    { "key": "ctrl+shift+w",          "command": "workbench.action.closeWindow" },
    { "key": "ctrl+w",                "command": "workbench.action.closeWindow",
                                         "when": "!editorIsOpen && !multipleEditorGroups" },
    { "key": "alt+f5",                "command": "workbench.action.compareEditor.nextChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "shift+alt+f5",          "command": "workbench.action.compareEditor.previousChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "f5",                    "command": "workbench.action.debug.continue",
                                         "when": "inDebugMode" },
    { "key": "ctrl+shift+f5",         "command": "workbench.action.debug.restart",
                                         "when": "inDebugMode" },
    { "key": "ctrl+f5",               "command": "workbench.action.debug.run",
                                         "when": "debuggersAvailable" },
    { "key": "f5",                    "command": "workbench.action.debug.start",
                                         "when": "debuggersAvailable && !inDebugMode" },
    { "key": "shift+f11",             "command": "workbench.action.debug.stepOut",
                                         "when": "debugState == 'stopped'" },
    { "key": "f10",                   "command": "workbench.action.debug.stepOver",
                                         "when": "debugState == 'stopped'" },
    { "key": "shift+f5",              "command": "workbench.action.debug.stop",
                                         "when": "inDebugMode" },
    { "key": "ctrl+k m",              "command": "workbench.action.editor.changeLanguageMode" },
    { "key": "ctrl+k p",              "command": "workbench.action.files.copyPathOfActiveFile" },
    { "key": "ctrl+n",                "command": "workbench.action.files.newUntitledFile" },
    { "key": "ctrl+o",                "command": "workbench.action.files.openFile" },
    { "key": "ctrl+k ctrl+o",         "command": "workbench.action.files.openFolder" },
    { "key": "ctrl+o",                "command": "workbench.action.files.openLocalFile",
                                         "when": "remoteFileDialogVisible" },
    { "key": "ctrl+k ctrl+o",         "command": "workbench.action.files.openLocalFolder",
                                         "when": "remoteFileDialogVisible" },
    { "key": "ctrl+k r",              "command": "workbench.action.files.revealActiveFileInWindows" },
    { "key": "ctrl+s",                "command": "workbench.action.files.save" },
    { "key": "ctrl+shift+s",          "command": "workbench.action.files.saveAs" },
    { "key": "ctrl+shift+s",          "command": "workbench.action.files.saveLocalFile",
                                         "when": "remoteFileDialogVisible" },
    { "key": "ctrl+k s",              "command": "workbench.action.files.saveWithoutFormatting" },
    { "key": "ctrl+k o",              "command": "workbench.action.files.showOpenedFileInNewWindow",
                                         "when": "emptyWorkspaceSupport" },
    { "key": "ctrl+shift+f",          "command": "workbench.action.findInFiles" },
    { "key": "ctrl+k ctrl+up",        "command": "workbench.action.focusAboveGroup" },
    { "key": "ctrl+k ctrl+down",      "command": "workbench.action.focusBelowGroup" },
    { "key": "ctrl+8",                "command": "workbench.action.focusEighthEditorGroup" },
    { "key": "ctrl+5",                "command": "workbench.action.focusFifthEditorGroup" },
    { "key": "ctrl+1",                "command": "workbench.action.focusFirstEditorGroup" },
    { "key": "ctrl+4",                "command": "workbench.action.focusFourthEditorGroup" },
    { "key": "ctrl+k ctrl+left",      "command": "workbench.action.focusLeftGroup" },
    { "key": "f6",                    "command": "workbench.action.focusNextPart" },
    { "key": "shift+f6",              "command": "workbench.action.focusPreviousPart" },
    { "key": "ctrl+k ctrl+right",     "command": "workbench.action.focusRightGroup" },
    { "key": "ctrl+2",                "command": "workbench.action.focusSecondEditorGroup" },
    { "key": "ctrl+7",                "command": "workbench.action.focusSeventhEditorGroup" },
    { "key": "ctrl+0",                "command": "workbench.action.focusSideBar" },
    { "key": "ctrl+6",                "command": "workbench.action.focusSixthEditorGroup" },
    { "key": "ctrl+3",                "command": "workbench.action.focusThirdEditorGroup" },
    { "key": "ctrl+g",                "command": "workbench.action.gotoLine" },
    { "key": "ctrl+shift+o",          "command": "workbench.action.gotoSymbol" },
    { "key": "escape",                "command": "workbench.action.hideInterfaceOverview",
                                         "when": "interfaceOverviewVisible" },
    { "key": "down",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "up",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pagedown",              "command": "workbench.action.interactivePlayground.pageDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pageup",                "command": "workbench.action.interactivePlayground.pageUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "ctrl+k enter",          "command": "workbench.action.keepEditor" },
    { "key": "ctrl+k ctrl+r",         "command": "workbench.action.keybindingsReference" },
    { "key": "ctrl+9",                "command": "workbench.action.lastEditorInGroup" },
    { "key": "alt+0",                 "command": "workbench.action.lastEditorInGroup" },
    { "key": "ctrl+k down",           "command": "workbench.action.moveActiveEditorGroupDown" },
    { "key": "ctrl+k left",           "command": "workbench.action.moveActiveEditorGroupLeft" },
    { "key": "ctrl+k right",          "command": "workbench.action.moveActiveEditorGroupRight" },
    { "key": "ctrl+k up",             "command": "workbench.action.moveActiveEditorGroupUp" },
    { "key": "ctrl+shift+pageup",     "command": "workbench.action.moveEditorLeftInGroup" },
    { "key": "ctrl+shift+pagedown",   "command": "workbench.action.moveEditorRightInGroup" },
    { "key": "shift+alt+1",           "command": "workbench.action.moveEditorToFirstGroup" },
    { "key": "shift+alt+9",           "command": "workbench.action.moveEditorToLastGroup" },
    { "key": "ctrl+alt+right",        "command": "workbench.action.moveEditorToNextGroup" },
    { "key": "ctrl+alt+left",         "command": "workbench.action.moveEditorToPreviousGroup" },
    { "key": "ctrl+alt+-",            "command": "workbench.action.navigateBack" },
    { "key": "ctrl+shift+-",          "command": "workbench.action.navigateForward" },
    { "key": "ctrl+k ctrl+q",         "command": "workbench.action.navigateToLastEditLocation" },
    { "key": "ctrl+shift+n",          "command": "workbench.action.newWindow" },
    { "key": "ctrl+pagedown",         "command": "workbench.action.nextEditor" },
    { "key": "ctrl+k ctrl+pagedown",  "command": "workbench.action.nextEditorInGroup" },
    { "key": "alt+1",                 "command": "workbench.action.openEditorAtIndex1" },
    { "key": "alt+2",                 "command": "workbench.action.openEditorAtIndex2" },
    { "key": "alt+3",                 "command": "workbench.action.openEditorAtIndex3" },
    { "key": "alt+4",                 "command": "workbench.action.openEditorAtIndex4" },
    { "key": "alt+5",                 "command": "workbench.action.openEditorAtIndex5" },
    { "key": "alt+6",                 "command": "workbench.action.openEditorAtIndex6" },
    { "key": "alt+7",                 "command": "workbench.action.openEditorAtIndex7" },
    { "key": "alt+8",                 "command": "workbench.action.openEditorAtIndex8" },
    { "key": "alt+9",                 "command": "workbench.action.openEditorAtIndex9" },
    { "key": "ctrl+k ctrl+s",         "command": "workbench.action.openGlobalKeybindings" },
    { "key": "ctrl+r",                "command": "workbench.action.openRecent" },
    { "key": "ctrl+,",                "command": "workbench.action.openSettings" },
    { "key": "ctrl+k ctrl+h",         "command": "workbench.action.output.toggleOutput" },
    { "key": "ctrl+k shift+enter",    "command": "workbench.action.pinEditor",
                                         "when": "!activeEditorIsPinned" },
    { "key": "ctrl+pageup",           "command": "workbench.action.previousEditor" },
    { "key": "ctrl+k ctrl+pageup",    "command": "workbench.action.previousEditorInGroup" },
    { "key": "ctrl+e",                "command": "workbench.action.quickOpen" },
    { "key": "ctrl+p",                "command": "workbench.action.quickOpen" },
    { "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup" },
    { "key": "ctrl+q",                "command": "workbench.action.quit" },
    { "key": "ctrl+shift+t",          "command": "workbench.action.reopenClosedEditor" },
    { "key": "ctrl+shift+h",          "command": "workbench.action.replaceInFiles" },
    { "key": "ctrl+shift+j",          "command": "workbench.action.search.toggleQueryDetails",
                                         "when": "inSearchEditor || searchViewletFocus" },
    { "key": "ctrl+k ctrl+t",         "command": "workbench.action.selectTheme" },
    { "key": "ctrl+k ctrl+p",         "command": "workbench.action.showAllEditors" },
    { "key": "ctrl+t",                "command": "workbench.action.showAllSymbols" },
    { "key": "f1",                    "command": "workbench.action.showCommands" },
    { "key": "ctrl+shift+p",          "command": "workbench.action.showCommands" },
    { "key": "ctrl+\\",               "command": "workbench.action.splitEditor" },
    { "key": "ctrl+k ctrl+\\",        "command": "workbench.action.splitEditorOrthogonal" },
    { "key": "ctrl+shift+b",          "command": "workbench.action.tasks.build" },
    { "key": "escape",                "command": "workbench.action.terminal.clearSelection",
                                         "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
    { "key": "ctrl+shift+c",          "command": "workbench.action.terminal.copySelection",
                                         "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
    { "key": "f3",                    "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "shift+enter",           "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalProcessSupported" },
    { "key": "shift+f3",              "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "enter",                 "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalProcessSupported" },
    { "key": "ctrl+f",                "command": "workbench.action.terminal.focusFind",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "alt+down",              "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+right",             "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+up",                "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+left",              "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+escape",          "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocus && terminalProcessSupported" },
    { "key": "escape",                "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocus && terminalProcessSupported" },
    { "key": "escape",                "command": "workbench.action.terminal.navigationModeExit",
                                         "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported" },
    { "key": "ctrl+down",             "command": "workbench.action.terminal.navigationModeFocusNext",
                                         "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+up",               "command": "workbench.action.terminal.navigationModeFocusPrevious",
                                         "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+`",          "command": "workbench.action.terminal.new" },
    { "key": "ctrl+shift+c",          "command": "workbench.action.terminal.openNativeConsole",
                                         "when": "!terminalFocus" },
    { "key": "ctrl+shift+v",          "command": "workbench.action.terminal.paste",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+left",       "command": "workbench.action.terminal.resizePaneLeft",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+right",      "command": "workbench.action.terminal.resizePaneRight",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+down",       "command": "workbench.action.terminal.scrollDown",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+pagedown",        "command": "workbench.action.terminal.scrollDownPage",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+end",             "command": "workbench.action.terminal.scrollToBottom",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+home",            "command": "workbench.action.terminal.scrollToTop",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+up",         "command": "workbench.action.terminal.scrollUp",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+pageup",          "command": "workbench.action.terminal.scrollUpPage",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+f",          "command": "workbench.action.terminal.searchWorkspace",
                                         "when": "terminalFocus && terminalProcessSupported && terminalProcessSupported && terminalTextSelected" },
    { "key": "ctrl+backspace",        "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0017"} },
    { "key": "ctrl+delete",           "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001bd"} },
    { "key": "ctrl+shift+5",          "command": "workbench.action.terminal.split",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+c",                 "command": "workbench.action.terminal.toggleFindCaseSensitive",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "alt+r",                 "command": "workbench.action.terminal.toggleFindRegex",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "alt+w",                 "command": "workbench.action.terminal.toggleFindWholeWord",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+`",                "command": "workbench.action.terminal.toggleTerminal" },
    { "key": "shift+alt+0",           "command": "workbench.action.toggleEditorGroupLayout" },
    { "key": "f11",                   "command": "workbench.action.toggleFullScreen" },
    { "key": "ctrl+j",                "command": "workbench.action.togglePanel" },
    { "key": "ctrl+b",                "command": "workbench.action.toggleSidebarVisibility" },
    { "key": "ctrl+meta+w",           "command": "workbench.action.toggleTabsVisibility" },
    { "key": "ctrl+k z",              "command": "workbench.action.toggleZenMode" },
    { "key": "ctrl+k shift+enter",    "command": "workbench.action.unpinEditor",
                                         "when": "activeEditorIsPinned" },
    { "key": "ctrl+numpad_add",       "command": "workbench.action.zoomIn" },
    { "key": "ctrl+shift+=",          "command": "workbench.action.zoomIn" },
    { "key": "ctrl+=",                "command": "workbench.action.zoomIn" },
    { "key": "ctrl+numpad_subtract",  "command": "workbench.action.zoomOut" },
    { "key": "ctrl+-",                "command": "workbench.action.zoomOut" },
    { "key": "ctrl+numpad0",          "command": "workbench.action.zoomReset" },
    { "key": "ctrl+shift+m",          "command": "workbench.actions.view.problems" },
    { "key": "ctrl+shift+y",          "command": "workbench.debug.action.toggleRepl",
                                         "when": "debuggersAvailable" },
    { "key": "ctrl+k ctrl+m",         "command": "workbench.extensions.action.showRecommendedKeymapExtensions" },
    { "key": "ctrl+k c",              "command": "workbench.files.action.compareWithClipboard" },
    { "key": "ctrl+k d",              "command": "workbench.files.action.compareWithSaved" },
    { "key": "ctrl+k e",              "command": "workbench.files.action.focusOpenEditorsView",
                                         "when": "workbench.explorer.openEditorsView.active" },
    { "key": "escape",                "command": "workbench.statusBar.clearFocus",
                                         "when": "statusBarFocused" },
    { "key": "home",                  "command": "workbench.statusBar.focusFirst",
                                         "when": "statusBarFocused" },
    { "key": "end",                   "command": "workbench.statusBar.focusLast",
                                         "when": "statusBarFocused" },
    { "key": "down",                  "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "right",                 "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "up",                    "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "left",                  "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "ctrl+shift+d",          "command": "workbench.view.debug" },
    { "key": "ctrl+shift+e",          "command": "workbench.view.explorer" },
    { "key": "ctrl+shift+x",          "command": "workbench.view.extensions" },
    { "key": "ctrl+shift+g",          "command": "workbench.view.scm" },
    { "key": "ctrl+shift+f",          "command": "workbench.view.search",
                                         "when": "!searchViewletVisible" },
    { "key": "ctrl+right",            "command": "breadcrumbs.focusNextWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "ctrl+left",             "command": "breadcrumbs.focusPreviousWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "escape",                "command": "breadcrumbs.selectEditor",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+k down",           "command": "views.moveViewDown",
                                         "when": "focusedView != ''" },
    { "key": "ctrl+k left",           "command": "views.moveViewLeft",
                                         "when": "focusedView != ''" },
    { "key": "ctrl+k right",          "command": "views.moveViewRight",
                                         "when": "focusedView != ''" },
    { "key": "ctrl+k up",             "command": "views.moveViewUp",
                                         "when": "focusedView != ''" },
    { "key": "f6",                    "command": "workbench.action.debug.pause",
                                         "when": "debugState == 'running'" },
    { "key": "f2",                    "command": "debug.renameWatchExpression",
                                         "when": "watchExpressionsFocused" },
    { "key": "f2",                    "command": "debug.setVariable",
                                         "when": "variablesFocused" },
    { "key": "space",                 "command": "debug.toggleBreakpoint",
                                         "when": "breakpointsFocused && !inputFocus" },
    { "key": "shift+delete",          "command": "deleteFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "delete",                "command": "deleteFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus" },
    { "key": "escape",                "command": "editor.closeCallHierarchy",
                                         "when": "callHierarchyVisible && !config.editor.stablePeek" },
    { "key": "enter",                 "command": "explorer.openAndPassFocus",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
    { "key": "escape",                "command": "filesExplorer.cancelCut",
                                         "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
    { "key": "ctrl+c",                "command": "filesExplorer.copy",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus" },
    { "key": "ctrl+x",                "command": "filesExplorer.cut",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus" },
    { "key": "space",                 "command": "filesExplorer.openFilePreserveFocus",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
    { "key": "ctrl+v",                "command": "filesExplorer.paste",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "home",                  "command": "firstCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "end",                   "command": "lastCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "delete",                "command": "moveFileToTrash",
                                         "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "right",                 "command": "nextCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "left",                  "command": "previousCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "delete",                "command": "remote.tunnel.closeInline",
                                         "when": "tunnelCloseable && tunnelViewFocus" },
    { "key": "ctrl+c",                "command": "remote.tunnel.copyAddressInline",
                                         "when": "tunnelViewFocus && tunnelType == 'Detected' || tunnelViewFocus && tunnelType == 'Forwarded'" },
    { "key": "f2",                    "command": "remote.tunnel.label",
                                         "when": "tunnelViewFocus && tunnelType == 'Forwarded'" },
    { "key": "f2",                    "command": "renameFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
    { "key": "f11",                   "command": "workbench.action.debug.stepInto",
                                         "when": "debugState != 'inactive'" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "referenceSearchVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "referenceSearchVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "notifications.hideList",
                                         "when": "notificationCenterVisible" },
    { "key": "ctrl+alt+-",            "command": "workbench.action.quickInputBack",
                                         "when": "inQuickOpen" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "ctrl+e",                "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+p",                "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+r",                "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "ctrl+shift+e",          "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+shift+p",          "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+shift+r",          "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "ctrl+r",                "command": "workbench.action.reloadWindow",
                                         "when": "isDevelopment" },
    { "key": "ctrl+shift+i",          "command": "workbench.action.toggleDevTools",
                                         "when": "isDevelopment" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "f10",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && debugConfigurationType == 'node'" },
    { "key": "ctrl+k ctrl+alt+s",     "command": "git.stageSelectedRanges",
                                         "when": "isInDiffEditor" },
    { "key": "ctrl+shift+v",          "command": "markdown.showPreview",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "shift+alt+f12",         "command": "references-view.findReferences",
                                         "when": "editorHasReferenceProvider" },
    { "key": "ctrl+k ctrl+n",         "command": "git.unstageSelectedRanges",
                                         "when": "isInDiffEditor" },
    { "key": "ctrl+k v",              "command": "markdown.showPreviewToSide",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "f4",                    "command": "references-view.next",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "ctrl+k ctrl+r",         "command": "git.revertSelectedRanges",
                                         "when": "isInDiffEditor" },
    { "key": "shift+f4",              "command": "references-view.prev",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "shift+alt+h",           "command": "references-view.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider" },
    { "key": "ctrl+shift+v",          "command": "asciidoc.showPreview",
                                         "when": "editorLangId == 'asciidoc'" },
    { "key": "ctrl+l",                "command": "center-editor-window.center",
                                         "when": "editorTextFocus || findWidgetVisible" },
    { "key": "alt+o",                 "command": "clangd.switchheadersource",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+l",                "command": "emacs.C-l",
                                         "when": "editorTextFocus" },
    { "key": "escape",                "command": "extension.aceJump.input.stop",
                                         "when": "aceJumpInput && editorTextFocus" },
    { "key": "alt+l alt+c",           "command": "extension.liveServer.goOffline",
                                         "when": "editorTextFocus" },
    { "key": "right",                 "command": "file-browser.stepIn",
                                         "when": "inFileBrowser" },
    { "key": "ctrl+shift+v",          "command": "html.showPreview",
                                         "when": "editorLangId == 'html'" },
    { "key": "ctrl+shift+i",          "command": "insertDateString.insertDateTime",
                                         "when": "editorTextFocus" },
    { "key": "shift+enter",           "command": "jupyter.execSelectionInteractive",
                                         "when": "editorTextFocus && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
    { "key": "ctrl+enter",            "command": "language-julia.executeJuliaCodeInREPL",
                                         "when": "editorTextFocus && editorLangId == 'julia'" },
    { "key": "ctrl+c",                "command": "multiclip.copy",
                                         "when": "editorTextFocus" },
    { "key": "shift+enter",           "command": "python.execSelectionInTerminal",
                                         "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
    { "key": "alt+q",                 "command": "rewrap.rewrapComment",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+u",          "command": "rust-analyzer.parentModule",
                                         "when": "editorTextFocus && editorLangId == 'rust'" },
    { "key": "alt+a",                 "command": "yo1dog.cursor-align.alignCursors",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+k v",              "command": "asciidoc.showPreviewToSide",
                                         "when": "editorLangId == 'asciidoc'" },
    { "key": "shift+alt+t",           "command": "clangd.typeHierarchy",
                                         "when": "editorTextFocus" },
    { "key": "alt+l alt+o",           "command": "extension.liveServer.goOnline",
                                         "when": "editorTextFocus" },
    { "key": "left",                  "command": "file-browser.stepOut",
                                         "when": "inFileBrowser" },
    { "key": "ctrl+k v",              "command": "html.showPreviewToSide",
                                         "when": "editorLangId == 'html'" },
    { "key": "ctrl+shift+alt+i",      "command": "insertDateString.insertOwnFormatDateTime",
                                         "when": "editorTextFocus" },
    { "key": "shift+enter",           "command": "jupyter.runcurrentcelladvance",
                                         "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
    { "key": "alt+enter",             "command": "language-julia.executeCodeBlockOrSelectionAndMove",
                                         "when": "editorTextFocus && editorLangId == 'julia'" },
    { "key": "ctrl+x",                "command": "multiclip.cut",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+m",          "command": "rust-analyzer.matchingBrace",
                                         "when": "editorTextFocus && editorLangId == 'rust'" },
    { "key": "ctrl+alt+v",            "command": "asciidoc.pasteImage",
                                         "when": "editorLangId == 'asciidoc'" },
    { "key": "ctrl+a",                "command": "file-browser.actions",
                                         "when": "inFileBrowser" },
    { "key": "ctrl+enter",            "command": "jupyter.runcurrentcell",
                                         "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
    { "key": "ctrl+c",                "command": "language-julia.interrupt",
                                         "when": "isJuliaEvaluating && isJuliaREPL && terminalFocus" },
    { "key": "ctrl+shift+v",          "command": "multiclip.paste",
                                         "when": "editorTextFocus && editorLangId != 'markdown'" },
    { "key": "ctrl+shift+j",          "command": "rust-analyzer.joinLines",
                                         "when": "editorTextFocus && editorLangId == 'rust'" },
    { "key": "ctrl+alt+s",            "command": "asciidoc.saveHTML",
                                         "when": "editorLangId == 'asciidoc'" },
    { "key": "tab",                   "command": "file-browser.tabNext",
                                         "when": "inFileBrowser" },
    { "key": "alt+enter",             "command": "jupyter.runcurrentcellandaddbelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
    { "key": "shift+enter",           "command": "language-julia.executeCellAndMove",
                                         "when": "editorTextFocus && editorLangId == 'julia'" },
    { "key": "ctrl+v",                "command": "multiclip.regularPaste",
                                         "when": "editorTextFocus" },
    { "key": "shift+tab",             "command": "file-browser.tabPrev",
                                         "when": "inFileBrowser" },
    { "key": "ctrl+i ctrl+d",         "command": "language-julia.clearCurrentInlineResult",
                                         "when": "editorTextFocus && juliaHasInlineResult && !editorHasSelection && !findWidgetVisible && !inSnippetMode && !isInEmbeddedEditor && !markerNavigationVisible && !onTypeRenameInputVisible && !parameterHintsVisible && !renameInputVisible && !suggestWidgetVisible && editorLangId == 'julia'" },
    { "key": "ctrl+shift+c",          "command": "multiclip.copyMerge",
                                         "when": "editorTextFocus" },
    { "key": "f",                     "command": "notebook.find",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "ctrl+i ctrl+c",         "command": "language-julia.clearAllInlineResultsInEditor",
                                         "when": "editorTextFocus && editorLangId == 'julia'" },
    { "key": "k",                     "command": "list.focusUp",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "ctrl+shift+x",          "command": "multiclip.cutMerge",
                                         "when": "editorTextFocus" },
    { "key": "alt+j alt+m",           "command": "language-julia.chooseModule",
                                         "when": "editorTextFocus && editorLangId == 'julia'" },
    { "key": "j",                     "command": "list.focusDown",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "alt+j alt+o",           "command": "language-julia.startREPL" },
    { "key": "a",                     "command": "notebook.cell.insertCodeCellAbove",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "alt+j alt+k",           "command": "language-julia.stopREPL" },
    { "key": "b",                     "command": "notebook.cell.insertCodeCellBelow",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "alt+j alt+e",           "command": "language-julia.changeCurrentEnvironment",
                                         "when": "editorTextFocus && editorLangId == 'julia'" },
    { "key": "d d",                   "command": "notebook.cell.delete",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "ctrl+enter",            "command": "language-julia.executeJuliaCodeInREPL",
                                         "when": "editorTextFocus && editorLangId == 'juliamarkdown'" },
    { "key": "z",                     "command": "notebook.undo",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "left",                  "command": "language-julia.plotpane-previous",
                                         "when": "jlplotpaneFocus" },
    { "key": "c",                     "command": "notebook.cell.copy",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "up",                    "command": "language-julia.plotpane-previous",
                                         "when": "jlplotpaneFocus" },
    { "key": "x",                     "command": "notebook.cell.cut",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "pageup",                "command": "language-julia.plotpane-previous",
                                         "when": "jlplotpaneFocus" },
    { "key": "v",                     "command": "notebook.cell.paste",
                                         "when": "notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "right",                 "command": "language-julia.plotpane-next",
                                         "when": "jlplotpaneFocus" },
    { "key": "ctrl+shift+-",          "command": "notebook.cell.split",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookViewType == 'jupyter-notebook'" },
    { "key": "ctrl+; s",              "command": "jupyter.insertCellBelowPosition",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "down",                  "command": "language-julia.plotpane-next",
                                         "when": "jlplotpaneFocus" },
    { "key": "ctrl+; b",              "command": "jupyter.insertCellBelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "pagedown",              "command": "language-julia.plotpane-next",
                                         "when": "jlplotpaneFocus" },
    { "key": "ctrl+; a",              "command": "jupyter.insertCellAbove",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "home",                  "command": "language-julia.plotpane-first",
                                         "when": "jlplotpaneFocus" },
    { "key": "ctrl+; x",              "command": "jupyter.deleteCells",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "end",                   "command": "language-julia.plotpane-last",
                                         "when": "jlplotpaneFocus" },
    { "key": "ctrl+shift+alt+[",      "command": "jupyter.extendSelectionByCellAbove",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "delete",                "command": "language-julia.plotpane-delete",
                                         "when": "jlplotpaneFocus" },
    { "key": "ctrl+shift+alt+]",      "command": "jupyter.extendSelectionByCellBelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "shift+delete",          "command": "language-julia.plotpane-delete-all",
                                         "when": "jlplotpaneFocus" },
    { "key": "ctrl+; u",              "command": "jupyter.moveCellsUp",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "ctrl+; d",              "command": "jupyter.moveCellsDown",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "ctrl+; m",              "command": "jupyter.changeCellToMarkdown",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "ctrl+; c",              "command": "jupyter.changeCellToCode",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "ctrl+alt+]",            "command": "jupyter.gotoNextCellInFile",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "ctrl+alt+[",            "command": "jupyter.gotoPrevCellInFile",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "ctrl+alt+\\",           "command": "jupyter.selectCellContents",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "ctrl+shift+alt+\\",     "command": "jupyter.selectCell",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" }
    ]


    // Here are other available commands:
    // - REPLVariables.focus
    // - REPLVariables.resetViewLocation
    // - acceptSelectedSuggestionOnEnter
    // - acceptSnippet
    // - actions.findWithSelection
    // - addRootFolder
    // - asciidoc.exportAsPDF
    // - asciidoc.preview.refresh
    // - asciidoc.preview.toggleLock
    // - asciidoc.saveDocbook
    // - asciidoc.showLockedPreviewToSide
    // - asciidoc.showPreviewSecuritySelector
    // - asciidoc.showSource
    // - breadcrumbs.toggle
    // - cSpell.addIgnoreWord
    // - cSpell.addIgnoreWordToFolder
    // - cSpell.addIgnoreWordToUser
    // - cSpell.addIgnoreWordToWorkspace
    // - cSpell.addWordToDictionary
    // - cSpell.addWordToDictionarySilent
    // - cSpell.addWordToFolderDictionary
    // - cSpell.addWordToUserDictionary
    // - cSpell.addWordToUserDictionarySilent
    // - cSpell.addWordToWorkspaceDictionary
    // - cSpell.addWordToWorkspaceDictionarySilent
    // - cSpell.disableCurrentLanguage
    // - cSpell.disableForGlobal
    // - cSpell.disableForWorkspace
    // - cSpell.disableLanguage
    // - cSpell.displayCSpellInfo
    // - cSpell.editText
    // - cSpell.enableCurrentLanguage
    // - cSpell.enableForGlobal
    // - cSpell.enableForWorkspace
    // - cSpell.enableLanguage
    // - cSpell.logPerfTimeline
    // - cSpell.removeWordFromFolderDictionary
    // - cSpell.removeWordFromUserDictionary
    // - cSpell.removeWordFromWorkspaceDictionary
    // - cSpell.toggleEnableForGlobal
    // - cSpell.toggleEnableSpellChecker
    // - cSpellExt_russian.disableRussian
    // - cSpellExt_russian.disableRussianWorkspace
    // - cSpellExt_russian.enableRussian
    // - cSpellExt_russian.enableRussianWorkspace
    // - cSpellRegExpTester.editRegExp
    // - cSpellRegExpTester.selectRegExp
    // - cSpellRegExpTester.testRegExp
    // - cSpellRegExpView.focus
    // - cSpellRegExpView.resetViewLocation
    // - changeEditorIndentation
    // - clangd.activate
    // - clangd.install
    // - clangd.memoryUsage
    // - clangd.memoryUsage.close
    // - clangd.memoryUsage.focus
    // - clangd.memoryUsage.resetViewLocation
    // - clangd.restart
    // - clangd.typeHierarchy.close
    // - clangd.typeHierarchy.viewChildren
    // - clangd.typeHierarchy.viewParents
    // - clangd.typeHierarchyView.focus
    // - clangd.typeHierarchyView.resetViewLocation
    // - clangd.update
    // - cleanSearchEditorState
    // - closeReferenceSearchEditor
    // - codelens.showLensesInCurrentLine
    // - columnSelect
    // - compareFiles
    // - compareSelected
    // - compositionEnd
    // - compositionStart
    // - createCursor
    // - cursorLineEnd
    // - cursorLineEndSelect
    // - cursorLineStart
    // - cursorLineStartSelect
    // - cursorRedo
    // - cursorWordAccessibilityLeft
    // - cursorWordAccessibilityLeftSelect
    // - cursorWordAccessibilityRight
    // - cursorWordAccessibilityRightSelect
    // - cursorWordEndLeft
    // - cursorWordEndLeftSelect
    // - cursorWordPartLeft
    // - cursorWordPartLeftSelect
    // - cursorWordPartRight
    // - cursorWordPartRightSelect
    // - cursorWordPartStartLeft
    // - cursorWordPartStartLeftSelect
    // - cursorWordRight
    // - cursorWordRightSelect
    // - cursorWordStartLeft
    // - cursorWordStartLeftSelect
    // - cursorWordStartRight
    // - cursorWordStartRightSelect
    // - cut
    // - debug.addConfiguration
    // - debug.addToWatchExpressions
    // - debug.breakWhenValueChanges
    // - debug.copyEvaluatePath
    // - debug.copyStackTrace
    // - debug.copyValue
    // - debug.enableOrDisableBreakpoint
    // - debug.installAdditionalDebuggers
    // - debug.jumpToCursor
    // - debug.startFromConfig
    // - default:compositionEnd
    // - default:compositionStart
    // - default:cut
    // - default:paste
    // - default:redo
    // - default:replacePreviousChar
    // - default:type
    // - default:undo
    // - deleteAllLeft
    // - deleteAllRight
    // - deleteInsideWord
    // - deleteWordEndLeft
    // - deleteWordEndRight
    // - deleteWordPartLeft
    // - deleteWordPartRight
    // - deleteWordStartLeft
    // - deleteWordStartRight
    // - editor.action.addCursorsToBottom
    // - editor.action.addCursorsToTop
    // - editor.action.addSelectionToPreviousFindMatch
    // - editor.action.clipboardCopyWithSyntaxHighlightingAction
    // - editor.action.detectIndentation
    // - editor.action.duplicateSelection
    // - editor.action.findReferences
    // - editor.action.fixAll
    // - editor.action.fontZoomIn
    // - editor.action.fontZoomOut
    // - editor.action.fontZoomReset
    // - editor.action.forceRetokenize
    // - editor.action.format
    // - editor.action.formatChanges
    // - editor.action.formatDocument.multiple
    // - editor.action.formatSelection.multiple
    // - editor.action.goToDeclaration
    // - editor.action.goToSelectionAnchor
    // - editor.action.goToTypeDefinition
    // - editor.action.indentUsingSpaces
    // - editor.action.indentUsingTabs
    // - editor.action.indentationToSpaces
    // - editor.action.indentationToTabs
    // - editor.action.inspectTMScopes
    // - editor.action.joinLines
    // - editor.action.measureExtHostLatency
    // - editor.action.moveCarretLeftAction
    // - editor.action.moveCarretRightAction
    // - editor.action.moveSelectionToPreviousFindMatch
    // - editor.action.nextCommentThreadAction
    // - editor.action.openDeclarationToTheSide
    // - editor.action.openLink
    // - editor.action.peekDeclaration
    // - editor.action.peekTypeDefinition
    // - editor.action.previewDeclaration
    // - editor.action.referenceSearch.trigger
    // - editor.action.reindentlines
    // - editor.action.reindentselectedlines
    // - editor.action.resetSuggestSize
    // - editor.action.revealDeclaration
    // - editor.action.selectionClipboardPaste
    // - editor.action.showDefinitionPreviewHover
    // - editor.action.showReferences
    // - editor.action.showSnippets
    // - editor.action.smartSelect.grow
    // - editor.action.sortLinesAscending
    // - editor.action.sortLinesDescending
    // - editor.action.startDebugTextMate
    // - editor.action.toggleColumnSelection
    // - editor.action.toggleMinimap
    // - editor.action.toggleRenderControlCharacter
    // - editor.action.toggleRenderWhitespace
    // - editor.action.transformToLowercase
    // - editor.action.transformToTitlecase
    // - editor.action.transformToUppercase
    // - editor.action.transpose
    // - editor.action.transposeLetters
    // - editor.action.wordHighlight.trigger
    // - editor.debug.action.addLogPoint
    // - editor.debug.action.conditionalBreakpoint
    // - editor.debug.action.goToNextBreakpoint
    // - editor.debug.action.goToPreviousBreakpoint
    // - editor.debug.action.runToCursor
    // - editor.debug.action.selectionToRepl
    // - editor.debug.action.selectionToWatch
    // - editor.debug.action.stepIntoTargets
    // - editor.emmet.action.balanceIn
    // - editor.emmet.action.balanceOut
    // - editor.emmet.action.decrementNumberByOne
    // - editor.emmet.action.decrementNumberByOneTenth
    // - editor.emmet.action.decrementNumberByTen
    // - editor.emmet.action.evaluateMathExpression
    // - editor.emmet.action.incrementNumberByOne
    // - editor.emmet.action.incrementNumberByOneTenth
    // - editor.emmet.action.incrementNumberByTen
    // - editor.emmet.action.matchTag
    // - editor.emmet.action.mergeLines
    // - editor.emmet.action.nextEditPoint
    // - editor.emmet.action.prevEditPoint
    // - editor.emmet.action.reflectCSSValue
    // - editor.emmet.action.removeTag
    // - editor.emmet.action.selectNextItem
    // - editor.emmet.action.selectPrevItem
    // - editor.emmet.action.splitJoinTag
    // - editor.emmet.action.toggleComment
    // - editor.emmet.action.updateImageSize
    // - editor.emmet.action.updateTag
    // - editor.emmet.action.wrapIndividualLinesWithAbbreviation
    // - editor.emmet.action.wrapWithAbbreviation
    // - emmet.expandAbbreviation
    // - explorer.download
    // - explorer.newFile
    // - explorer.newFolder
    // - explorer.openWith
    // - extension.aceJump
    // - extension.aceJump.line
    // - extension.aceJump.multiChar
    // - extension.aceJump.selection
    // - extension.bisect.next
    // - extension.bisect.start
    // - extension.bisect.stop
    // - extension.changeCase.camel
    // - extension.changeCase.commands
    // - extension.changeCase.constant
    // - extension.changeCase.dot
    // - extension.changeCase.kebab
    // - extension.changeCase.lower
    // - extension.changeCase.lowerFirst
    // - extension.changeCase.no
    // - extension.changeCase.param
    // - extension.changeCase.pascal
    // - extension.changeCase.path
    // - extension.changeCase.sentence
    // - extension.changeCase.snake
    // - extension.changeCase.swap
    // - extension.changeCase.title
    // - extension.changeCase.upper
    // - extension.changeCase.upperFirst
    // - extension.emeraldwalk.disableRunOnSave
    // - extension.emeraldwalk.enableRunOnSave
    // - extension.js-debug.autoAttachToProcess
    // - extension.js-debug.clearAutoAttachVariables
    // - extension.js-debug.createDiagnostics
    // - extension.js-debug.debugLink
    // - extension.js-debug.experimentEnlist
    // - extension.js-debug.revealPage
    // - extension.js-debug.setAutoAttachVariables
    // - extension.jsProfileVisualizer.table.clearCodeLenses
    // - extension.liveServer.changeWorkspace
    // - extension.node-debug.attachNodeProcess
    // - extension.node-debug.toggleAutoAttach
    // - extension.node-debug.toggleSkippingFile
    // - extension.node-debug2.toggleSkippingFile
    // - extension.open
    // - extension.pwa-chrome-debug.addCustomBreakpoints
    // - extension.pwa-chrome-debug.removeAllCustomBreakpoints
    // - extension.pwa-chrome-debug.removeCustomBreakpoint
    // - extension.pwa-node-debug.attachNodeProcess
    // - extension.pwa-node-debug.createDebuggerTerminal
    // - extension.pwa-node-debug.npmScript
    // - extension.pwa-node-debug.pickNodeProcess
    // - extension.pwa-node-debug.prettyPrint
    // - extension.pwa-node-debug.startProfile
    // - extension.pwa-node-debug.stopProfile
    // - extension.pwa-node-debug.toggleSkippingFile
    // - extensions.recommendedList.focus
    // - extensions.recommendedList.resetViewLocation
    // - file-browser.open
    // - files.openTimeline
    // - filesExplorer.findInWorkspace
    // - git._syncAll
    // - git.addRemote
    // - git.api.getRemoteSources
    // - git.api.getRepositories
    // - git.api.getRepositoryState
    // - git.branch
    // - git.branchFrom
    // - git.checkout
    // - git.checkoutDetached
    // - git.cherryPick
    // - git.clean
    // - git.cleanAll
    // - git.cleanAllTracked
    // - git.cleanAllUntracked
    // - git.clone
    // - git.cloneRecursive
    // - git.close
    // - git.commit
    // - git.commitAll
    // - git.commitAllAmend
    // - git.commitAllAmendNoVerify
    // - git.commitAllNoVerify
    // - git.commitAllSigned
    // - git.commitAllSignedNoVerify
    // - git.commitEmpty
    // - git.commitEmptyNoVerify
    // - git.commitNoVerify
    // - git.commitStaged
    // - git.commitStagedAmend
    // - git.commitStagedAmendNoVerify
    // - git.commitStagedNoVerify
    // - git.commitStagedSigned
    // - git.commitStagedSignedNoVerify
    // - git.createTag
    // - git.deleteBranch
    // - git.deleteTag
    // - git.fetch
    // - git.fetchAll
    // - git.fetchPrune
    // - git.ignore
    // - git.init
    // - git.merge
    // - git.openChange
    // - git.openFile
    // - git.openFile2
    // - git.openHEADFile
    // - git.openRepository
    // - git.openResource
    // - git.publish
    // - git.pull
    // - git.pullFrom
    // - git.pullRebase
    // - git.push
    // - git.pushForce
    // - git.pushTags
    // - git.pushTo
    // - git.pushToForce
    // - git.pushWithTags
    // - git.pushWithTagsForce
    // - git.rebase
    // - git.rebaseAbort
    // - git.refresh
    // - git.removeRemote
    // - git.rename
    // - git.renameBranch
    // - git.restoreCommitTemplate
    // - git.revealInExplorer
    // - git.revertChange
    // - git.setLogLevel
    // - git.showOutput
    // - git.stage
    // - git.stageAll
    // - git.stageAllMerge
    // - git.stageAllTracked
    // - git.stageAllUntracked
    // - git.stageChange
    // - git.stash
    // - git.stashApply
    // - git.stashApplyLatest
    // - git.stashDrop
    // - git.stashIncludeUntracked
    // - git.stashPop
    // - git.stashPopLatest
    // - git.sync
    // - git.syncRebase
    // - git.timeline.copyCommitId
    // - git.timeline.copyCommitMessage
    // - git.timeline.openDiff
    // - git.undoCommit
    // - git.unstage
    // - git.unstageAll
    // - github.provide-token
    // - github.publish
    // - goToNextReferenceFromEmbeddedEditor
    // - goToPreviousReferenceFromEmbeddedEditor
    // - help.tweetFeedback
    // - html.preview.refresh
    // - html.preview.toggleLock
    // - html.showLockedPreviewToSide
    // - html.showPreviewSecuritySelector
    // - html.showSource
    // - imagePreview.zoomIn
    // - imagePreview.zoomOut
    // - insertDateString.insertDate
    // - insertDateString.insertTime
    // - insertDateString.insertTimestamp
    // - javascript.goToProjectConfig
    // - javascript.reloadProjects
    // - jsBrowserBreakpoints.focus
    // - jsBrowserBreakpoints.resetViewLocation
    // - jupyter.addcellbelow
    // - jupyter.clearSavedJupyterUris
    // - jupyter.collapseallcells
    // - jupyter.createGitHubIssue
    // - jupyter.createnewinteractive
    // - jupyter.createnewnotebook
    // - jupyter.debugFileInteractive
    // - jupyter.debugcell
    // - jupyter.debugcontinue
    // - jupyter.debugcurrentcell.palette
    // - jupyter.debugstepover
    // - jupyter.debugstop
    // - jupyter.enableDebugLogging
    // - jupyter.expandallcells
    // - jupyter.export
    // - jupyter.exportAsPythonScript
    // - jupyter.exportToHTML
    // - jupyter.exportToPDF
    // - jupyter.exportfileandoutputasnotebook
    // - jupyter.exportfileasnotebook
    // - jupyter.exportoutputasnotebook
    // - jupyter.importnotebook
    // - jupyter.importnotebookfile
    // - jupyter.interruptkernel
    // - jupyter.latestExtension
    // - jupyter.notebookeditor.addcellbelow
    // - jupyter.notebookeditor.collapseallcells
    // - jupyter.notebookeditor.expandallcells
    // - jupyter.notebookeditor.export
    // - jupyter.notebookeditor.interruptkernel
    // - jupyter.notebookeditor.redocells
    // - jupyter.notebookeditor.removeallcells
    // - jupyter.notebookeditor.restartkernel
    // - jupyter.notebookeditor.runallcells
    // - jupyter.notebookeditor.runselectedcell
    // - jupyter.notebookeditor.trust
    // - jupyter.notebookeditor.undocells
    // - jupyter.opennotebook
    // - jupyter.opennotebookInPreviewEditor
    // - jupyter.redocells
    // - jupyter.removeallcells
    // - jupyter.resetLoggingLevel
    // - jupyter.restartkernel
    // - jupyter.runFileInteractive
    // - jupyter.runallcells
    // - jupyter.runallcellsabove
    // - jupyter.runallcellsabove.palette
    // - jupyter.runcell
    // - jupyter.runcellandallbelow
    // - jupyter.runcurrentcellandallbelow.palette
    // - jupyter.runfromline
    // - jupyter.runtoline
    // - jupyter.scrolltocell
    // - jupyter.selectJupyterInterpreter
    // - jupyter.selectjupytercommandline
    // - jupyter.selectjupyteruri
    // - jupyter.showDataViewer
    // - jupyter.submitGitHubIssue
    // - jupyter.switchKernel
    // - jupyter.switchOffInsidersChannel
    // - jupyter.switchToDailyChannel
    // - jupyter.switchToWeeklyChannel
    // - jupyter.undocells
    // - jupyter.viewOutput
    // - jupyterViewVariables.focus
    // - jupyterViewVariables.resetViewLocation
    // - keybindings.editor.copyCommandKeybindingEntry
    // - keybindings.editor.resetKeybinding
    // - keybindings.editor.showConflicts
    // - keybindings.editor.showDefaultKeybindings
    // - keybindings.editor.showUserKeybindings
    // - language-julia.activateFromDir
    // - language-julia.activateHere
    // - language-julia.cdHere
    // - language-julia.clearAllInlineResults
    // - language-julia.debugEditorContents
    // - language-julia.executeCell
    // - language-julia.executeCodeBlockOrSelection
    // - language-julia.executeFile
    // - language-julia.openPackageDirectory
    // - language-julia.refreshLanguageServer
    // - language-julia.restartLanguageServer
    // - language-julia.runEditorContents
    // - language-julia.selectBlock
    // - language-julia.show-plotpane
    // - language-julia.showInVSCode
    // - language-julia.toggleLinter
    // - language-julia.weave-open-preview
    // - language-julia.weave-open-preview-side
    // - language-julia.weave-save
    // - lastCursorLineSelect
    // - lastCursorLineSelectDrag
    // - lastCursorWordSelect
    // - layoutEditorGroups
    // - lineBreakInsert
    // - list.focusFirstChild
    // - list.focusLastChild
    // - list.focusParent
    // - list.scrollLeft
    // - list.scrollRight
    // - list.selectAndPreserveFocus
    // - list.toggleFilterOnType
    // - list.toggleKeyboardNavigation
    // - lldb.alternateBackend
    // - lldb.attach
    // - lldb.changeDisplaySettings
    // - lldb.commandPrompt
    // - lldb.diagnose
    // - lldb.displayFormat
    // - lldb.getCargoLaunchConfigs
    // - lldb.modules.copyValue
    // - lldb.pickMyProcess
    // - lldb.pickProcess
    // - lldb.showDisassembly
    // - lldb.symbols
    // - lldb.toggleDerefPointers
    // - lldb.toggleDisassembly
    // - loadedModules.focus
    // - loadedModules.resetViewLocation
    // - macros.closePanelCloseEditors
    // - macros.closePanelCloseEditorsToggleSidebar
    // - macros.closePanelFocusFilesExplorer
    // - macros.focusPanelToggleSidebar
    // - macros.inspect
    // - markdown.preview.refresh
    // - markdown.preview.toggleLock
    // - markdown.showLockedPreviewToSide
    // - markdown.showPreviewSecuritySelector
    // - markdown.showSource
    // - merge-conflict.accept.all-both
    // - merge-conflict.accept.all-current
    // - merge-conflict.accept.all-incoming
    // - merge-conflict.accept.both
    // - merge-conflict.accept.current
    // - merge-conflict.accept.incoming
    // - merge-conflict.accept.selection
    // - merge-conflict.compare
    // - merge-conflict.next
    // - merge-conflict.previous
    // - multiclip.clearBuffer
    // - multiclip.list
    // - notebook.cancelExecution
    // - notebook.cell.changeLanguage
    // - notebook.cell.insertCodeCellAtTop
    // - notebook.cell.insertMarkdownCellAbove
    // - notebook.cell.insertMarkdownCellAtTop
    // - notebook.cell.insertMarkdownCellBelow
    // - notebook.clearAllCellsOutputs
    // - notebook.diff.cell.revertInput
    // - notebook.diff.cell.revertMetadata
    // - notebook.diff.cell.revertOutputs
    // - notebook.diff.switchToText
    // - notebook.execute
    // - notebook.inspectLayout
    // - notebook.renderAllMarkdownCells
    // - notebook.selectKernel
    // - notebook.trust
    // - notifications.clearAll
    // - notifications.focusToasts
    // - notifications.showList
    // - notifications.toggleList
    // - npm.debugScript
    // - npm.focus
    // - npm.openScript
    // - npm.packageManager
    // - npm.refresh
    // - npm.resetViewLocation
    // - npm.runInstall
    // - npm.runScript
    // - npm.runScriptFromFolder
    // - npm.runSelectedScript
    // - openInGithub.copyInGitHubBlame
    // - openInGithub.copyInGitHubFile
    // - openInGithub.copyInGitHubHistory
    // - openInGithub.openInGitHubBlame
    // - openInGithub.openInGitHubFile
    // - openInGithub.openInGitHubHistory
    // - openInTerminal
    // - openReference
    // - outline.focus
    // - outline.resetViewLocation
    // - paste
    // - perfview.show
    // - php.untrustValidationExecutable
    // - problems.action.clearFilterText
    // - problems.action.copyMessage
    // - problems.action.copyRelatedInformationMessage
    // - problems.action.showMultilineMessage
    // - problems.action.showSinglelineMessage
    // - python.analysis.clearCache
    // - python.analysis.restartLanguageServer
    // - python.buildWorkspaceSymbols
    // - python.clearWorkspaceInterpreter
    // - python.configureTests
    // - python.createTerminal
    // - python.debugTestNode
    // - python.debugtests
    // - python.discoverTests
    // - python.discoveringTests
    // - python.enableLinting
    // - python.enableSourceMapSupport
    // - python.execInTerminal
    // - python.execInTerminal-icon
    // - python.execSelectionInDjangoShell
    // - python.goToPythonObject
    // - python.launchTensorBoard
    // - python.openTestNodeInEditor
    // - python.refactorExtractMethod
    // - python.refactorExtractVariable
    // - python.resetInterpreterSecurityStorage
    // - python.runCurrentTestFile
    // - python.runFailedTests
    // - python.runLinting
    // - python.runTestNode
    // - python.runtests
    // - python.selectAndDebugTestMethod
    // - python.selectAndRunTestFile
    // - python.selectAndRunTestMethod
    // - python.setInterpreter
    // - python.setLinter
    // - python.sortImports
    // - python.startPage.open
    // - python.startREPL
    // - python.stopTests
    // - python.switchOffInsidersChannel
    // - python.switchToDailyChannel
    // - python.switchToWeeklyChannel
    // - python.viewLanguageServerOutput
    // - python.viewOutput
    // - python.viewTestOutput
    // - python_tests.focus
    // - python_tests.resetViewLocation
    // - refactorPreview.discard
    // - refactorPreview.focus
    // - refactorPreview.groupByFile
    // - refactorPreview.groupByType
    // - refactorPreview.resetViewContainerLocation
    // - refactorPreview.resetViewLocation
    // - refactorPreview.toggleGrouping
    // - references-view.clear
    // - references-view.clearHistory
    // - references-view.copy
    // - references-view.copyAll
    // - references-view.copyPath
    // - references-view.findImplementations
    // - references-view.pickFromHistory
    // - references-view.refind
    // - references-view.refresh
    // - references-view.removeCallItem
    // - references-view.removeReferenceItem
    // - references-view.showIncomingCalls
    // - references-view.showOutgoingCalls
    // - references-view.tree.focus
    // - references-view.tree.resetViewLocation
    // - remote.tunnel.changeLocalPort
    // - remote.tunnel.closeCommandPalette
    // - remote.tunnel.copyAddressCommandPalette
    // - remote.tunnel.forwardCommandPalette
    // - remote.tunnel.forwardInline
    // - remote.tunnel.open
    // - remote.tunnel.openCommandPalette
    // - removeRootFolder
    // - repl.action.copyAll
    // - replacePreviousChar
    // - resetGettingStartedProgress
    // - revealInExplorer
    // - rewrap.rewrapCommentAt
    // - rewrap.toggleAutoWrap
    // - ruby.reloadProject
    // - ruby.showLanguageServerOutputChannel
    // - ruby.showOutputChannel
    // - rust-analyzer.analyzerStatus
    // - rust-analyzer.applyActionGroup
    // - rust-analyzer.applySnippetWorkspaceEdit
    // - rust-analyzer.debug
    // - rust-analyzer.debugSingle
    // - rust-analyzer.expandMacro
    // - rust-analyzer.gotoLocation
    // - rust-analyzer.memoryUsage
    // - rust-analyzer.newDebugConfig
    // - rust-analyzer.onEnter
    // - rust-analyzer.openCargoToml
    // - rust-analyzer.openDocs
    // - rust-analyzer.reload
    // - rust-analyzer.reloadWorkspace
    // - rust-analyzer.resolveCodeAction
    // - rust-analyzer.run
    // - rust-analyzer.runSingle
    // - rust-analyzer.serverVersion
    // - rust-analyzer.showReferences
    // - rust-analyzer.ssr
    // - rust-analyzer.syntaxTree
    // - rust-analyzer.toggleInlayHints
    // - rust-analyzer.updateGithubToken
    // - saveAll
    // - scm.openInTerminal
    // - search.action.clearHistory
    // - search.action.clearSearchResults
    // - search.action.collapseSearchResults
    // - search.action.copyAll
    // - search.action.expandSearchResults
    // - search.action.focusSearchList
    // - search.action.openEditor
    // - search.action.openNewEditor
    // - search.action.openNewEditorToSide
    // - search.action.refreshSearchResults
    // - search.action.revealInSideBar
    // - selectFirstSuggestion
    // - selectForCompare
    // - selectLastSuggestion
    // - setContext
    // - setSelection
    // - settings.filterByModified
    // - settings.filterByOnline
    // - settings.switchToJSON
    // - showEditorScreenReaderNotification
    // - terminal.focus
    // - terminal.resetViewContainerLocation
    // - terminal.resetViewLocation
    // - timeline.focus
    // - timeline.resetViewLocation
    // - tlaplus.evaluateExpression
    // - tlaplus.evaluateSelection
    // - tlaplus.exportToPdf
    // - tlaplus.exportToTex
    // - tlaplus.model.check.customRun
    // - tlaplus.model.check.display
    // - tlaplus.model.check.run
    // - tlaplus.model.check.runAgain
    // - tlaplus.model.check.stop
    // - tlaplus.out.visualize
    // - tlaplus.parse
    // - toggle.diff.ignoreTrimWhitespace
    // - toggle.diff.renderSideBySide
    // - toggleEscapeSequenceLogging
    // - typescript.goToProjectConfig
    // - typescript.openTsServerLog
    // - typescript.reloadProjects
    // - typescript.restartTsServer
    // - typescript.selectTypeScriptVersion
    // - unicode-latex.insertMathSymbol
    // - unicode-latex.replaceLatexNames
    // - update.check
    // - update.checkForVSCodeUpdate
    // - update.checking
    // - update.downloadNow
    // - update.downloading
    // - update.install
    // - update.restart
    // - update.showCurrentReleaseNotes
    // - update.updating
    // - workbench.action.acceptSelectedQuickOpenItem
    // - workbench.action.addComment
    // - workbench.action.addRootFolder
    // - workbench.action.alternativeAcceptSelectedQuickOpenItem
    // - workbench.action.blur
    // - workbench.action.clearCommandHistory
    // - workbench.action.clearEditorHistory
    // - workbench.action.clearRecentFiles
    // - workbench.action.closeActivePinnedEditor
    // - workbench.action.closeEditorInAllGroups
    // - workbench.action.closeEditorsAndGroup
    // - workbench.action.closeEditorsInOtherGroups
    // - workbench.action.closeEditorsToTheLeft
    // - workbench.action.closeEditorsToTheRight
    // - workbench.action.closeOtherEditors
    // - workbench.action.closePanel
    // - workbench.action.closeSidebar
    // - workbench.action.compareEditor.focusOtherSide
    // - workbench.action.compareEditor.focusPrimarySide
    // - workbench.action.compareEditor.focusSecondarySide
    // - workbench.action.configureLanguageBasedSettings
    // - workbench.action.configureLocale
    // - workbench.action.configureRuntimeArguments
    // - workbench.action.debug.configure
    // - workbench.action.debug.disconnect
    // - workbench.action.debug.restartFrame
    // - workbench.action.debug.reverseContinue
    // - workbench.action.debug.selectandstart
    // - workbench.action.debug.stepBack
    // - workbench.action.debug.terminateThread
    // - workbench.action.decreaseViewHeight
    // - workbench.action.decreaseViewSize
    // - workbench.action.decreaseViewWidth
    // - workbench.action.duplicateWorkspaceInNewWindow
    // - workbench.action.editor.changeEOL
    // - workbench.action.editor.changeEncoding
    // - workbench.action.editorLayoutSingle
    // - workbench.action.editorLayoutThreeColumns
    // - workbench.action.editorLayoutThreeRows
    // - workbench.action.editorLayoutTwoByTwoGrid
    // - workbench.action.editorLayoutTwoColumns
    // - workbench.action.editorLayoutTwoColumnsBottom
    // - workbench.action.editorLayoutTwoRows
    // - workbench.action.editorLayoutTwoRowsRight
    // - workbench.action.evenEditorWidths
    // - workbench.action.extensionHostProfiler.stop
    // - workbench.action.files.openFileFolderInNewWindow
    // - workbench.action.files.openFileInNewWindow
    // - workbench.action.files.openFolderInNewWindow
    // - workbench.action.files.revert
    // - workbench.action.files.saveAll
    // - workbench.action.files.saveFiles
    // - workbench.action.firstEditorInGroup
    // - workbench.action.focusAboveGroupWithoutWrap
    // - workbench.action.focusActiveEditorGroup
    // - workbench.action.focusActivityBar
    // - workbench.action.focusBelowGroupWithoutWrap
    // - workbench.action.focusCommentsPanel
    // - workbench.action.focusLastEditorGroup
    // - workbench.action.focusLeftGroupWithoutWrap
    // - workbench.action.focusNextGroup
    // - workbench.action.focusPanel
    // - workbench.action.focusPreviousGroup
    // - workbench.action.focusQuickOpen
    // - workbench.action.focusRightGroupWithoutWrap
    // - workbench.action.generateColorTheme
    // - workbench.action.increaseViewHeight
    // - workbench.action.increaseViewSize
    // - workbench.action.increaseViewWidth
    // - workbench.action.inspectContextKeys
    // - workbench.action.inspectKeyMappings
    // - workbench.action.inspectKeyMappingsJSON
    // - workbench.action.installCommandLine
    // - workbench.action.joinAllGroups
    // - workbench.action.joinTwoGroups
    // - workbench.action.logStorage
    // - workbench.action.logWorkingCopies
    // - workbench.action.manageTrustedDomain
    // - workbench.action.maximizeEditor
    // - workbench.action.minimizeOtherEditors
    // - workbench.action.moveEditorToAboveGroup
    // - workbench.action.moveEditorToBelowGroup
    // - workbench.action.moveEditorToLeftGroup
    // - workbench.action.moveEditorToRightGroup
    // - workbench.action.moveFocusedView
    // - workbench.action.moveView
    // - workbench.action.navigateDown
    // - workbench.action.navigateEditorGroups
    // - workbench.action.navigateLast
    // - workbench.action.navigateLeft
    // - workbench.action.navigateRight
    // - workbench.action.navigateUp
    // - workbench.action.newGroupAbove
    // - workbench.action.newGroupBelow
    // - workbench.action.newGroupLeft
    // - workbench.action.newGroupRight
    // - workbench.action.nextPanelView
    // - workbench.action.nextSideBarView
    // - workbench.action.openActiveLogOutputFile
    // - workbench.action.openDefaultKeybindingsFile
    // - workbench.action.openDocumentationUrl
    // - workbench.action.openEditorAtIndex
    // - workbench.action.openExtensionLogsFolder
    // - workbench.action.openFolderSettings
    // - workbench.action.openFolderSettingsFile
    // - workbench.action.openGlobalKeybindingsFile
    // - workbench.action.openGlobalSettings
    // - workbench.action.openIntroductoryVideosUrl
    // - workbench.action.openIssueReporter
    // - workbench.action.openLicenseUrl
    // - workbench.action.openLogFile
    // - workbench.action.openLogsFolder
    // - workbench.action.openNewsletterSignupUrl
    // - workbench.action.openNextRecentlyUsedEditor
    // - workbench.action.openNextRecentlyUsedEditorInGroup
    // - workbench.action.openPreviousEditorFromHistory
    // - workbench.action.openPreviousRecentlyUsedEditor
    // - workbench.action.openPreviousRecentlyUsedEditorInGroup
    // - workbench.action.openPrivacyStatementUrl
    // - workbench.action.openProcessExplorer
    // - workbench.action.openRawDefaultSettings
    // - workbench.action.openRemoteSettings
    // - workbench.action.openRequestFeatureUrl
    // - workbench.action.openSettings2
    // - workbench.action.openSettingsJson
    // - workbench.action.openSnippets
    // - workbench.action.openTipsAndTricksUrl
    // - workbench.action.openTwitterUrl
    // - workbench.action.openView
    // - workbench.action.openWorkspace
    // - workbench.action.openWorkspaceConfigFile
    // - workbench.action.openWorkspaceInNewWindow
    // - workbench.action.openWorkspaceSettings
    // - workbench.action.openWorkspaceSettingsFile
    // - workbench.action.positionPanelBottom
    // - workbench.action.positionPanelLeft
    // - workbench.action.positionPanelRight
    // - workbench.action.previousPanelView
    // - workbench.action.previousSideBarView
    // - workbench.action.problems.focus
    // - workbench.action.quickOpenLeastRecentlyUsedEditor
    // - workbench.action.quickOpenNavigateNext
    // - workbench.action.quickOpenNavigateNextInTerminalPicker
    // - workbench.action.quickOpenNavigateNextInViewPicker
    // - workbench.action.quickOpenNavigatePrevious
    // - workbench.action.quickOpenNavigatePreviousInTerminalPicker
    // - workbench.action.quickOpenNavigatePreviousInViewPicker
    // - workbench.action.quickOpenPreviousEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditor
    // - workbench.action.quickOpenRecent
    // - workbench.action.quickOpenSelectNext
    // - workbench.action.quickOpenSelectPrevious
    // - workbench.action.quickOpenTerm
    // - workbench.action.quickOpenView
    // - workbench.action.quickPickManyToggle
    // - workbench.action.quickSwitchWindow
    // - workbench.action.reloadWindowWithExtensionsDisabled
    // - workbench.action.remote.showMenu
    // - workbench.action.removeRootFolder
    // - workbench.action.reopenWithEditor
    // - workbench.action.reportPerformanceIssueUsingReporter
    // - workbench.action.resetFocusedViewLocation
    // - workbench.action.resetViewLocations
    // - workbench.action.restartExtensionHost
    // - workbench.action.revertAndCloseActiveEditor
    // - workbench.action.saveWorkspaceAs
    // - workbench.action.selectIconTheme
    // - workbench.action.selectProductIconTheme
    // - workbench.action.setLogLevel
    // - workbench.action.showAboutDialog
    // - workbench.action.showAllEditorsByMostRecentlyUsed
    // - workbench.action.showEditorsInActiveGroup
    // - workbench.action.showEditorsInGroup
    // - workbench.action.showEmmetCommands
    // - workbench.action.showErrorsWarnings
    // - workbench.action.showGettingStarted
    // - workbench.action.showInteractivePlayground
    // - workbench.action.showInterfaceOverview
    // - workbench.action.showLogs
    // - workbench.action.showRuntimeExtensions
    // - workbench.action.showWelcomePage
    // - workbench.action.showWindowLog
    // - workbench.action.splitEditorDown
    // - workbench.action.splitEditorLeft
    // - workbench.action.splitEditorRight
    // - workbench.action.splitEditorUp
    // - workbench.action.switchWindow
    // - workbench.action.tasks.configureDefaultBuildTask
    // - workbench.action.tasks.configureDefaultTestTask
    // - workbench.action.tasks.configureTaskRunner
    // - workbench.action.tasks.manageAutomaticRunning
    // - workbench.action.tasks.openUserTasks
    // - workbench.action.tasks.openWorkspaceFileTasks
    // - workbench.action.tasks.reRunTask
    // - workbench.action.tasks.restartTask
    // - workbench.action.tasks.showLog
    // - workbench.action.tasks.showTasks
    // - workbench.action.tasks.terminate
    // - workbench.action.tasks.test
    // - workbench.action.tasks.toggleProblems
    // - workbench.action.terminal.attachToSession
    // - workbench.action.terminal.clear
    // - workbench.action.terminal.focus
    // - workbench.action.terminal.focusAtIndex1
    // - workbench.action.terminal.focusAtIndex2
    // - workbench.action.terminal.focusAtIndex3
    // - workbench.action.terminal.focusAtIndex4
    // - workbench.action.terminal.focusAtIndex5
    // - workbench.action.terminal.focusAtIndex6
    // - workbench.action.terminal.focusAtIndex7
    // - workbench.action.terminal.focusAtIndex8
    // - workbench.action.terminal.focusAtIndex9
    // - workbench.action.terminal.focusNext
    // - workbench.action.terminal.focusPrevious
    // - workbench.action.terminal.kill
    // - workbench.action.terminal.manageWorkspaceShellPermissions
    // - workbench.action.terminal.newInActiveWorkspace
    // - workbench.action.terminal.relaunch
    // - workbench.action.terminal.rename
    // - workbench.action.terminal.resizePaneDown
    // - workbench.action.terminal.resizePaneUp
    // - workbench.action.terminal.runActiveFile
    // - workbench.action.terminal.runSelectedText
    // - workbench.action.terminal.scrollToNextCommand
    // - workbench.action.terminal.scrollToPreviousCommand
    // - workbench.action.terminal.selectAll
    // - workbench.action.terminal.selectDefaultShell
    // - workbench.action.terminal.selectToNextCommand
    // - workbench.action.terminal.selectToNextLine
    // - workbench.action.terminal.selectToPreviousCommand
    // - workbench.action.terminal.selectToPreviousLine
    // - workbench.action.terminal.showEnvironmentInformation
    // - workbench.action.terminal.splitInActiveWorkspace
    // - workbench.action.toggleActivityBarVisibility
    // - workbench.action.toggleAutoSave
    // - workbench.action.toggleCenteredLayout
    // - workbench.action.toggleConfirmBeforeClose
    // - workbench.action.toggleEditorType
    // - workbench.action.toggleEditorVisibility
    // - workbench.action.toggleEditorWidths
    // - workbench.action.toggleKeepEditors
    // - workbench.action.toggleKeybindingsLog
    // - workbench.action.toggleMaximizedPanel
    // - workbench.action.toggleMenuBar
    // - workbench.action.toggleMultiCursorModifier
    // - workbench.action.toggleScreencastMode
    // - workbench.action.toggleSearchOnType
    // - workbench.action.toggleSharedProcess
    // - workbench.action.toggleSidebarPosition
    // - workbench.action.toggleStatusbarVisibility
    // - workbench.action.uninstallCommandLine
    // - workbench.action.url.openUrl
    // - workbench.action.webview.openDeveloperTools
    // - workbench.action.webview.reloadWebviewAction
    // - workbench.actions.sync.compareWithLocal
    // - workbench.actions.sync.editMachineName
    // - workbench.actions.sync.replaceCurrent
    // - workbench.actions.sync.resolveResource
    // - workbench.actions.sync.turnOffSyncOnMachine
    // - workbench.actions.treeView.REPLVariables.collapseAll
    // - workbench.actions.treeView.REPLVariables.refresh
    // - workbench.actions.treeView.cSpellRegExpView.collapseAll
    // - workbench.actions.treeView.cSpellRegExpView.refresh
    // - workbench.actions.treeView.clangd.memoryUsage.collapseAll
    // - workbench.actions.treeView.clangd.memoryUsage.refresh
    // - workbench.actions.treeView.clangd.typeHierarchyView.collapseAll
    // - workbench.actions.treeView.clangd.typeHierarchyView.refresh
    // - workbench.actions.treeView.jsBrowserBreakpoints.collapseAll
    // - workbench.actions.treeView.jsBrowserBreakpoints.refresh
    // - workbench.actions.treeView.loadedModules.collapseAll
    // - workbench.actions.treeView.loadedModules.refresh
    // - workbench.actions.treeView.npm.collapseAll
    // - workbench.actions.treeView.npm.refresh
    // - workbench.actions.treeView.python_tests.collapseAll
    // - workbench.actions.treeView.python_tests.refresh
    // - workbench.actions.treeView.references-view.tree.collapseAll
    // - workbench.actions.treeView.references-view.tree.refresh
    // - workbench.actions.treeView.workbench.views.sync.localActivity.collapseAll
    // - workbench.actions.treeView.workbench.views.sync.localActivity.refresh
    // - workbench.actions.treeView.workbench.views.sync.machines.collapseAll
    // - workbench.actions.treeView.workbench.views.sync.machines.refresh
    // - workbench.actions.treeView.workbench.views.sync.merges.collapseAll
    // - workbench.actions.treeView.workbench.views.sync.merges.refresh
    // - workbench.actions.treeView.workbench.views.sync.remoteActivity.collapseAll
    // - workbench.actions.treeView.workbench.views.sync.remoteActivity.refresh
    // - workbench.actions.view.toggleProblems
    // - workbench.debug.action.focusBreakpointsView
    // - workbench.debug.action.focusCallStackView
    // - workbench.debug.action.focusRepl
    // - workbench.debug.action.focusVariablesView
    // - workbench.debug.action.focusWatchView
    // - workbench.debug.breakPointsView.resetViewLocation
    // - workbench.debug.callStackView.resetViewLocation
    // - workbench.debug.loadedScriptsView.focus
    // - workbench.debug.loadedScriptsView.resetViewLocation
    // - workbench.debug.panel.action.clearReplAction
    // - workbench.debug.variablesView.resetViewLocation
    // - workbench.debug.viewlet.action.addFunctionBreakpointAction
    // - workbench.debug.viewlet.action.disableAllBreakpoints
    // - workbench.debug.viewlet.action.enableAllBreakpoints
    // - workbench.debug.viewlet.action.reapplyBreakpointsAction
    // - workbench.debug.viewlet.action.removeAllBreakpoints
    // - workbench.debug.watchExpressionsView.resetViewLocation
    // - workbench.debug.welcome.focus
    // - workbench.debug.welcome.resetViewLocation
    // - workbench.explorer.fileView.focus
    // - workbench.explorer.fileView.resetViewLocation
    // - workbench.explorer.openEditorsView.resetViewLocation
    // - workbench.extensions.action.addExtensionToWorkspaceRecommendations
    // - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
    // - workbench.extensions.action.addToWorkspaceFolderRecommendations
    // - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
    // - workbench.extensions.action.addToWorkspaceRecommendations
    // - workbench.extensions.action.checkForUpdates
    // - workbench.extensions.action.clearExtensionsSearchResults
    // - workbench.extensions.action.configure
    // - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
    // - workbench.extensions.action.configureWorkspaceRecommendedExtensions
    // - workbench.extensions.action.copyExtension
    // - workbench.extensions.action.copyExtensionId
    // - workbench.extensions.action.debugExtensionHost
    // - workbench.extensions.action.disableAll
    // - workbench.extensions.action.disableAllWorkspace
    // - workbench.extensions.action.disableAutoUpdate
    // - workbench.extensions.action.enableAll
    // - workbench.extensions.action.enableAllWorkspace
    // - workbench.extensions.action.enableAutoUpdate
    // - workbench.extensions.action.extensionHostProfile
    // - workbench.extensions.action.ignoreRecommendation
    // - workbench.extensions.action.install.specificVersion
    // - workbench.extensions.action.installExtensions
    // - workbench.extensions.action.installVSIX
    // - workbench.extensions.action.listBuiltInExtensions
    // - workbench.extensions.action.listOutdatedExtensions
    // - workbench.extensions.action.manageAuthorizedExtensionURIs
    // - workbench.extensions.action.openExtensionsFolder
    // - workbench.extensions.action.refreshExtension
    // - workbench.extensions.action.reinstall
    // - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
    // - workbench.extensions.action.saveExtensionHostProfile
    // - workbench.extensions.action.showAzureExtensions
    // - workbench.extensions.action.showDisabledExtensions
    // - workbench.extensions.action.showEnabledExtensions
    // - workbench.extensions.action.showExtensionsForLanguage
    // - workbench.extensions.action.showExtensionsWithIds
    // - workbench.extensions.action.showInstalledExtensions
    // - workbench.extensions.action.showLanguageExtensions
    // - workbench.extensions.action.showPopularExtensions
    // - workbench.extensions.action.showRecommendedExtensions
    // - workbench.extensions.action.stopExtensionHostProfile
    // - workbench.extensions.action.toggleIgnoreExtension
    // - workbench.extensions.action.undoIgnoredRecommendation
    // - workbench.extensions.action.updateAllExtensions
    // - workbench.extensions.command.installFromVSIX
    // - workbench.extensions.installMissingDependencies
    // - workbench.files.action.acceptLocalChanges
    // - workbench.files.action.collapseExplorerFolders
    // - workbench.files.action.compareFileWith
    // - workbench.files.action.focusFilesExplorer
    // - workbench.files.action.refreshFilesExplorer
    // - workbench.files.action.revertLocalChanges
    // - workbench.files.action.saveAllInGroup
    // - workbench.files.action.showActiveFileInExplorer
    // - workbench.getCodeExchangeProxyEndpoints
    // - workbench.output.action.clearOutput
    // - workbench.output.action.switchBetweenOutputs
    // - workbench.output.action.toggleAutoScroll
    // - workbench.panel.markers.resetViewContainerLocation
    // - workbench.panel.markers.view.focus
    // - workbench.panel.markers.view.resetViewLocation
    // - workbench.panel.output.focus
    // - workbench.panel.output.resetViewContainerLocation
    // - workbench.panel.output.resetViewLocation
    // - workbench.panel.repl.resetViewContainerLocation
    // - workbench.panel.repl.view.focus
    // - workbench.panel.repl.view.resetViewLocation
    // - workbench.scm.focus
    // - workbench.scm.repositories.focus
    // - workbench.scm.repositories.resetViewLocation
    // - workbench.scm.resetViewLocation
    // - workbench.userData.actions.openSyncBackupsFolder
    // - workbench.userData.actions.signin
    // - workbench.userData.actions.turningOn
    // - workbench.userDataSync.actions.configure
    // - workbench.userDataSync.actions.manage
    // - workbench.userDataSync.actions.resolveKeybindingsConflicts
    // - workbench.userDataSync.actions.resolveSettingsConflicts
    // - workbench.userDataSync.actions.resolveSnippetsConflicts
    // - workbench.userDataSync.actions.settings
    // - workbench.userDataSync.actions.showLog
    // - workbench.userDataSync.actions.showSyncedData
    // - workbench.userDataSync.actions.syncNow
    // - workbench.userDataSync.actions.turnOff
    // - workbench.userDataSync.actions.turnOn
    // - workbench.view.debug.resetViewContainerLocation
    // - workbench.view.explorer.resetViewContainerLocation
    // - workbench.view.extension.cspell-explorer
    // - workbench.view.extension.cspell-explorer.resetViewContainerLocation
    // - workbench.view.extension.julia-explorer
    // - workbench.view.extension.julia-explorer.resetViewContainerLocation
    // - workbench.view.extension.jupyter
    // - workbench.view.extension.jupyter.resetViewContainerLocation
    // - workbench.view.extension.references-view
    // - workbench.view.extension.references-view.resetViewContainerLocation
    // - workbench.view.extension.test
    // - workbench.view.extension.test.resetViewContainerLocation
    // - workbench.view.extensions.resetViewContainerLocation
    // - workbench.view.remote
    // - workbench.view.remote.resetViewContainerLocation
    // - workbench.view.scm.resetViewContainerLocation
    // - workbench.view.search.focus
    // - workbench.view.search.resetViewContainerLocation
    // - workbench.view.search.resetViewLocation
    // - workbench.view.sync.resetViewContainerLocation
    // - workbench.views.extensions.builtinFeatureExtensions.focus
    // - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
    // - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
    // - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
    // - workbench.views.extensions.builtinThemeExtensions.focus
    // - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
    // - workbench.views.extensions.disabled.focus
    // - workbench.views.extensions.disabled.resetViewLocation
    // - workbench.views.extensions.enabled.focus
    // - workbench.views.extensions.enabled.resetViewLocation
    // - workbench.views.extensions.installed.empty.focus
    // - workbench.views.extensions.installed.empty.resetViewLocation
    // - workbench.views.extensions.installed.focus
    // - workbench.views.extensions.installed.resetViewLocation
    // - workbench.views.extensions.marketplace.focus
    // - workbench.views.extensions.marketplace.resetViewLocation
    // - workbench.views.extensions.otherRecommendations.focus
    // - workbench.views.extensions.otherRecommendations.resetViewLocation
    // - workbench.views.extensions.popular.focus
    // - workbench.views.extensions.popular.resetViewLocation
    // - workbench.views.extensions.searchBuiltin.focus
    // - workbench.views.extensions.searchBuiltin.resetViewLocation
    // - workbench.views.extensions.searchDisabled.focus
    // - workbench.views.extensions.searchDisabled.resetViewLocation
    // - workbench.views.extensions.searchEnabled.focus
    // - workbench.views.extensions.searchEnabled.resetViewLocation
    // - workbench.views.extensions.searchInstalled.focus
    // - workbench.views.extensions.searchInstalled.resetViewLocation
    // - workbench.views.extensions.searchOutdated.focus
    // - workbench.views.extensions.searchOutdated.resetViewLocation
    // - workbench.views.extensions.workspaceRecommendations.focus
    // - workbench.views.extensions.workspaceRecommendations.resetViewLocation
    // - workbench.views.sync.localActivity.focus
    // - workbench.views.sync.localActivity.resetViewLocation
    // - workbench.views.sync.machines.focus
    // - workbench.views.sync.machines.resetViewLocation
    // - workbench.views.sync.merges.focus
    // - workbench.views.sync.merges.resetViewLocation
    // - workbench.views.sync.remoteActivity.focus
    // - workbench.views.sync.remoteActivity.resetViewLocation
